//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 12 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `alertRed`.
    static let alertRed = Rswift.ColorResource(bundle: R.hostingBundle, name: "alertRed")
    /// Color `background`.
    static let background = Rswift.ColorResource(bundle: R.hostingBundle, name: "background")
    /// Color `card`.
    static let card = Rswift.ColorResource(bundle: R.hostingBundle, name: "card")
    /// Color `divider`.
    static let divider = Rswift.ColorResource(bundle: R.hostingBundle, name: "divider")
    /// Color `green`.
    static let green = Rswift.ColorResource(bundle: R.hostingBundle, name: "green")
    /// Color `modalOverlay`.
    static let modalOverlay = Rswift.ColorResource(bundle: R.hostingBundle, name: "modalOverlay")
    /// Color `pink`.
    static let pink = Rswift.ColorResource(bundle: R.hostingBundle, name: "pink")
    /// Color `primary`.
    static let primary = Rswift.ColorResource(bundle: R.hostingBundle, name: "primary")
    /// Color `secondary`.
    static let secondary = Rswift.ColorResource(bundle: R.hostingBundle, name: "secondary")
    /// Color `text`.
    static let text = Rswift.ColorResource(bundle: R.hostingBundle, name: "text")
    /// Color `yellow`.
    static let yellow = Rswift.ColorResource(bundle: R.hostingBundle, name: "yellow")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "alertRed", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func alertRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.alertRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "background", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "card", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "divider", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func divider(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.divider, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "green", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "modalOverlay", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func modalOverlay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.modalOverlay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "pink", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func pink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.pink, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "primary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "secondary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "text", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func text(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.text, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "yellow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func yellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.yellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "alertRed", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func alertRed(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.alertRed.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "background", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func background(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.background.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "card", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func card(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.card.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "divider", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func divider(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.divider.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "green", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func green(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.green.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "modalOverlay", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func modalOverlay(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.modalOverlay.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "pink", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func pink(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.pink.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "primary", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func primary(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.primary.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "secondary", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func secondary(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.secondary.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "text", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func text(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.text.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "yellow", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func yellow(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.yellow.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 132 files.
  struct file {
    /// Resource file `Arial Unicode.ttf`.
    static let arialUnicodeTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Arial Unicode", pathExtension: "ttf")
    /// Resource file `Inter-Black.ttf`.
    static let interBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-Black", pathExtension: "ttf")
    /// Resource file `Inter-Bold.ttf`.
    static let interBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-Bold", pathExtension: "ttf")
    /// Resource file `Inter-ExtraBold.ttf`.
    static let interExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-ExtraBold", pathExtension: "ttf")
    /// Resource file `Inter-ExtraLight.ttf`.
    static let interExtraLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-ExtraLight", pathExtension: "ttf")
    /// Resource file `Inter-Light.ttf`.
    static let interLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-Light", pathExtension: "ttf")
    /// Resource file `Inter-Medium.ttf`.
    static let interMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-Medium", pathExtension: "ttf")
    /// Resource file `Inter-Regular.ttf`.
    static let interRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-Regular", pathExtension: "ttf")
    /// Resource file `Inter-SemiBold.ttf`.
    static let interSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-SemiBold", pathExtension: "ttf")
    /// Resource file `Inter-Thin.ttf`.
    static let interThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-Thin", pathExtension: "ttf")
    /// Resource file `Inter-VariableFont_slnt,wght.ttf`.
    static let interVariableFont_slntWghtTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-VariableFont_slnt,wght", pathExtension: "ttf")
    /// Resource file `Montserrat-Black.ttf`.
    static let montserratBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-Black", pathExtension: "ttf")
    /// Resource file `Montserrat-BlackItalic.ttf`.
    static let montserratBlackItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-BlackItalic", pathExtension: "ttf")
    /// Resource file `Montserrat-Bold.ttf`.
    static let montserratBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-Bold", pathExtension: "ttf")
    /// Resource file `Montserrat-BoldItalic.ttf`.
    static let montserratBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-BoldItalic", pathExtension: "ttf")
    /// Resource file `Montserrat-ExtraBold.ttf`.
    static let montserratExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-ExtraBold", pathExtension: "ttf")
    /// Resource file `Montserrat-ExtraBoldItalic.ttf`.
    static let montserratExtraBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-ExtraBoldItalic", pathExtension: "ttf")
    /// Resource file `Montserrat-ExtraLight.ttf`.
    static let montserratExtraLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-ExtraLight", pathExtension: "ttf")
    /// Resource file `Montserrat-ExtraLightItalic.ttf`.
    static let montserratExtraLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-ExtraLightItalic", pathExtension: "ttf")
    /// Resource file `Montserrat-Italic-VariableFont_wght.ttf`.
    static let montserratItalicVariableFont_wghtTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-Italic-VariableFont_wght", pathExtension: "ttf")
    /// Resource file `Montserrat-Italic.ttf`.
    static let montserratItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-Italic", pathExtension: "ttf")
    /// Resource file `Montserrat-Light.ttf`.
    static let montserratLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-Light", pathExtension: "ttf")
    /// Resource file `Montserrat-LightItalic.ttf`.
    static let montserratLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-LightItalic", pathExtension: "ttf")
    /// Resource file `Montserrat-Medium.ttf`.
    static let montserratMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-Medium", pathExtension: "ttf")
    /// Resource file `Montserrat-MediumItalic.ttf`.
    static let montserratMediumItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-MediumItalic", pathExtension: "ttf")
    /// Resource file `Montserrat-Regular.ttf`.
    static let montserratRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-Regular", pathExtension: "ttf")
    /// Resource file `Montserrat-SemiBold.ttf`.
    static let montserratSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-SemiBold", pathExtension: "ttf")
    /// Resource file `Montserrat-SemiBoldItalic.ttf`.
    static let montserratSemiBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-SemiBoldItalic", pathExtension: "ttf")
    /// Resource file `Montserrat-Thin.ttf`.
    static let montserratThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-Thin", pathExtension: "ttf")
    /// Resource file `Montserrat-ThinItalic.ttf`.
    static let montserratThinItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-ThinItalic", pathExtension: "ttf")
    /// Resource file `Montserrat-VariableFont_wght.ttf`.
    static let montserratVariableFont_wghtTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-VariableFont_wght", pathExtension: "ttf")
    /// Resource file `Rubik-Black.ttf`.
    static let rubikBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Rubik-Black", pathExtension: "ttf")
    /// Resource file `Rubik-BlackItalic.ttf`.
    static let rubikBlackItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Rubik-BlackItalic", pathExtension: "ttf")
    /// Resource file `Rubik-Bold.ttf`.
    static let rubikBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Rubik-Bold", pathExtension: "ttf")
    /// Resource file `Rubik-BoldItalic.ttf`.
    static let rubikBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Rubik-BoldItalic", pathExtension: "ttf")
    /// Resource file `Rubik-ExtraBold.ttf`.
    static let rubikExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Rubik-ExtraBold", pathExtension: "ttf")
    /// Resource file `Rubik-ExtraBoldItalic.ttf`.
    static let rubikExtraBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Rubik-ExtraBoldItalic", pathExtension: "ttf")
    /// Resource file `Rubik-Italic-VariableFont_wght.ttf`.
    static let rubikItalicVariableFont_wghtTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Rubik-Italic-VariableFont_wght", pathExtension: "ttf")
    /// Resource file `Rubik-Italic.ttf`.
    static let rubikItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Rubik-Italic", pathExtension: "ttf")
    /// Resource file `Rubik-Light.ttf`.
    static let rubikLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Rubik-Light", pathExtension: "ttf")
    /// Resource file `Rubik-LightItalic.ttf`.
    static let rubikLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Rubik-LightItalic", pathExtension: "ttf")
    /// Resource file `Rubik-Medium.ttf`.
    static let rubikMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Rubik-Medium", pathExtension: "ttf")
    /// Resource file `Rubik-MediumItalic.ttf`.
    static let rubikMediumItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Rubik-MediumItalic", pathExtension: "ttf")
    /// Resource file `Rubik-Regular.ttf`.
    static let rubikRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Rubik-Regular", pathExtension: "ttf")
    /// Resource file `Rubik-SemiBold.ttf`.
    static let rubikSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Rubik-SemiBold", pathExtension: "ttf")
    /// Resource file `Rubik-SemiBoldItalic.ttf`.
    static let rubikSemiBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Rubik-SemiBoldItalic", pathExtension: "ttf")
    /// Resource file `Rubik-VariableFont_wght.ttf`.
    static let rubikVariableFont_wghtTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Rubik-VariableFont_wght", pathExtension: "ttf")
    /// Resource file `SF-Compact-Display-Black.otf`.
    static let sfCompactDisplayBlackOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Display-Black", pathExtension: "otf")
    /// Resource file `SF-Compact-Display-Bold.otf`.
    static let sfCompactDisplayBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Display-Bold", pathExtension: "otf")
    /// Resource file `SF-Compact-Display-Heavy.otf`.
    static let sfCompactDisplayHeavyOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Display-Heavy", pathExtension: "otf")
    /// Resource file `SF-Compact-Display-Light.otf`.
    static let sfCompactDisplayLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Display-Light", pathExtension: "otf")
    /// Resource file `SF-Compact-Display-Medium.otf`.
    static let sfCompactDisplayMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Display-Medium", pathExtension: "otf")
    /// Resource file `SF-Compact-Display-Regular.otf`.
    static let sfCompactDisplayRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Display-Regular", pathExtension: "otf")
    /// Resource file `SF-Compact-Display-Semibold.otf`.
    static let sfCompactDisplaySemiboldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Display-Semibold", pathExtension: "otf")
    /// Resource file `SF-Compact-Display-Thin.otf`.
    static let sfCompactDisplayThinOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Display-Thin", pathExtension: "otf")
    /// Resource file `SF-Compact-Display-Ultralight.otf`.
    static let sfCompactDisplayUltralightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Display-Ultralight", pathExtension: "otf")
    /// Resource file `SF-Compact-Italic.ttf`.
    static let sfCompactItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Italic", pathExtension: "ttf")
    /// Resource file `SF-Compact-Rounded-Black.otf`.
    static let sfCompactRoundedBlackOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Rounded-Black", pathExtension: "otf")
    /// Resource file `SF-Compact-Rounded-Bold.otf`.
    static let sfCompactRoundedBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Rounded-Bold", pathExtension: "otf")
    /// Resource file `SF-Compact-Rounded-Heavy.otf`.
    static let sfCompactRoundedHeavyOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Rounded-Heavy", pathExtension: "otf")
    /// Resource file `SF-Compact-Rounded-Light.otf`.
    static let sfCompactRoundedLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Rounded-Light", pathExtension: "otf")
    /// Resource file `SF-Compact-Rounded-Medium.otf`.
    static let sfCompactRoundedMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Rounded-Medium", pathExtension: "otf")
    /// Resource file `SF-Compact-Rounded-Regular.otf`.
    static let sfCompactRoundedRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Rounded-Regular", pathExtension: "otf")
    /// Resource file `SF-Compact-Rounded-Semibold.otf`.
    static let sfCompactRoundedSemiboldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Rounded-Semibold", pathExtension: "otf")
    /// Resource file `SF-Compact-Rounded-Thin.otf`.
    static let sfCompactRoundedThinOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Rounded-Thin", pathExtension: "otf")
    /// Resource file `SF-Compact-Rounded-Ultralight.otf`.
    static let sfCompactRoundedUltralightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Rounded-Ultralight", pathExtension: "otf")
    /// Resource file `SF-Compact-Text-Black.otf`.
    static let sfCompactTextBlackOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Text-Black", pathExtension: "otf")
    /// Resource file `SF-Compact-Text-BlackItalic.otf`.
    static let sfCompactTextBlackItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Text-BlackItalic", pathExtension: "otf")
    /// Resource file `SF-Compact-Text-Bold.otf`.
    static let sfCompactTextBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Text-Bold", pathExtension: "otf")
    /// Resource file `SF-Compact-Text-BoldItalic.otf`.
    static let sfCompactTextBoldItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Text-BoldItalic", pathExtension: "otf")
    /// Resource file `SF-Compact-Text-Heavy.otf`.
    static let sfCompactTextHeavyOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Text-Heavy", pathExtension: "otf")
    /// Resource file `SF-Compact-Text-HeavyItalic.otf`.
    static let sfCompactTextHeavyItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Text-HeavyItalic", pathExtension: "otf")
    /// Resource file `SF-Compact-Text-Light.otf`.
    static let sfCompactTextLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Text-Light", pathExtension: "otf")
    /// Resource file `SF-Compact-Text-LightItalic.otf`.
    static let sfCompactTextLightItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Text-LightItalic", pathExtension: "otf")
    /// Resource file `SF-Compact-Text-Medium.otf`.
    static let sfCompactTextMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Text-Medium", pathExtension: "otf")
    /// Resource file `SF-Compact-Text-MediumItalic.otf`.
    static let sfCompactTextMediumItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Text-MediumItalic", pathExtension: "otf")
    /// Resource file `SF-Compact-Text-Regular.otf`.
    static let sfCompactTextRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Text-Regular", pathExtension: "otf")
    /// Resource file `SF-Compact-Text-RegularItalic.otf`.
    static let sfCompactTextRegularItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Text-RegularItalic", pathExtension: "otf")
    /// Resource file `SF-Compact-Text-Semibold.otf`.
    static let sfCompactTextSemiboldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Text-Semibold", pathExtension: "otf")
    /// Resource file `SF-Compact-Text-SemiboldItalic.otf`.
    static let sfCompactTextSemiboldItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Text-SemiboldItalic", pathExtension: "otf")
    /// Resource file `SF-Compact-Text-Thin.otf`.
    static let sfCompactTextThinOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Text-Thin", pathExtension: "otf")
    /// Resource file `SF-Compact-Text-ThinItalic.otf`.
    static let sfCompactTextThinItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Text-ThinItalic", pathExtension: "otf")
    /// Resource file `SF-Compact-Text-Ultralight.otf`.
    static let sfCompactTextUltralightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Text-Ultralight", pathExtension: "otf")
    /// Resource file `SF-Compact-Text-UltralightItalic.otf`.
    static let sfCompactTextUltralightItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact-Text-UltralightItalic", pathExtension: "otf")
    /// Resource file `SF-Compact.ttf`.
    static let sfCompactTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Compact", pathExtension: "ttf")
    /// Resource file `SF-Pro-Display-Black.otf`.
    static let sfProDisplayBlackOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Black", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-BlackItalic.otf`.
    static let sfProDisplayBlackItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-BlackItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-Bold.otf`.
    static let sfProDisplayBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Bold", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-BoldItalic.otf`.
    static let sfProDisplayBoldItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-BoldItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-Heavy.otf`.
    static let sfProDisplayHeavyOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Heavy", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-HeavyItalic.otf`.
    static let sfProDisplayHeavyItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-HeavyItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-Light.otf`.
    static let sfProDisplayLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Light", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-LightItalic.otf`.
    static let sfProDisplayLightItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-LightItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-Medium.otf`.
    static let sfProDisplayMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Medium", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-MediumItalic.otf`.
    static let sfProDisplayMediumItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-MediumItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-Regular.otf`.
    static let sfProDisplayRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Regular", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-RegularItalic.otf`.
    static let sfProDisplayRegularItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-RegularItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-Semibold.otf`.
    static let sfProDisplaySemiboldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Semibold", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-SemiboldItalic.otf`.
    static let sfProDisplaySemiboldItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-SemiboldItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-Thin.otf`.
    static let sfProDisplayThinOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Thin", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-ThinItalic.otf`.
    static let sfProDisplayThinItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-ThinItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-Ultralight.otf`.
    static let sfProDisplayUltralightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Ultralight", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-UltralightItalic.otf`.
    static let sfProDisplayUltralightItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-UltralightItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Italic.ttf`.
    static let sfProItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Italic", pathExtension: "ttf")
    /// Resource file `SF-Pro-Rounded-Black.otf`.
    static let sfProRoundedBlackOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Rounded-Black", pathExtension: "otf")
    /// Resource file `SF-Pro-Rounded-Bold.otf`.
    static let sfProRoundedBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Rounded-Bold", pathExtension: "otf")
    /// Resource file `SF-Pro-Rounded-Heavy.otf`.
    static let sfProRoundedHeavyOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Rounded-Heavy", pathExtension: "otf")
    /// Resource file `SF-Pro-Rounded-Light.otf`.
    static let sfProRoundedLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Rounded-Light", pathExtension: "otf")
    /// Resource file `SF-Pro-Rounded-Medium.otf`.
    static let sfProRoundedMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Rounded-Medium", pathExtension: "otf")
    /// Resource file `SF-Pro-Rounded-Regular.otf`.
    static let sfProRoundedRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Rounded-Regular", pathExtension: "otf")
    /// Resource file `SF-Pro-Rounded-Semibold.otf`.
    static let sfProRoundedSemiboldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Rounded-Semibold", pathExtension: "otf")
    /// Resource file `SF-Pro-Rounded-Thin.otf`.
    static let sfProRoundedThinOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Rounded-Thin", pathExtension: "otf")
    /// Resource file `SF-Pro-Rounded-Ultralight.otf`.
    static let sfProRoundedUltralightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Rounded-Ultralight", pathExtension: "otf")
    /// Resource file `SF-Pro-Text-Black.otf`.
    static let sfProTextBlackOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Text-Black", pathExtension: "otf")
    /// Resource file `SF-Pro-Text-BlackItalic.otf`.
    static let sfProTextBlackItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Text-BlackItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Text-Bold.otf`.
    static let sfProTextBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Text-Bold", pathExtension: "otf")
    /// Resource file `SF-Pro-Text-BoldItalic.otf`.
    static let sfProTextBoldItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Text-BoldItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Text-Heavy.otf`.
    static let sfProTextHeavyOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Text-Heavy", pathExtension: "otf")
    /// Resource file `SF-Pro-Text-HeavyItalic.otf`.
    static let sfProTextHeavyItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Text-HeavyItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Text-Light.otf`.
    static let sfProTextLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Text-Light", pathExtension: "otf")
    /// Resource file `SF-Pro-Text-LightItalic.otf`.
    static let sfProTextLightItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Text-LightItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Text-Medium.otf`.
    static let sfProTextMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Text-Medium", pathExtension: "otf")
    /// Resource file `SF-Pro-Text-MediumItalic.otf`.
    static let sfProTextMediumItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Text-MediumItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Text-Regular.otf`.
    static let sfProTextRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Text-Regular", pathExtension: "otf")
    /// Resource file `SF-Pro-Text-RegularItalic.otf`.
    static let sfProTextRegularItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Text-RegularItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Text-Semibold.otf`.
    static let sfProTextSemiboldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Text-Semibold", pathExtension: "otf")
    /// Resource file `SF-Pro-Text-SemiboldItalic.otf`.
    static let sfProTextSemiboldItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Text-SemiboldItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Text-Thin.otf`.
    static let sfProTextThinOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Text-Thin", pathExtension: "otf")
    /// Resource file `SF-Pro-Text-ThinItalic.otf`.
    static let sfProTextThinItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Text-ThinItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Text-Ultralight.otf`.
    static let sfProTextUltralightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Text-Ultralight", pathExtension: "otf")
    /// Resource file `SF-Pro-Text-UltralightItalic.otf`.
    static let sfProTextUltralightItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Text-UltralightItalic", pathExtension: "otf")
    /// Resource file `SF-Pro.ttf`.
    static let sfProTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro", pathExtension: "ttf")

    /// `bundle.url(forResource: "Arial Unicode", withExtension: "ttf")`
    static func arialUnicodeTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.arialUnicodeTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-Black", withExtension: "ttf")`
    static func interBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-Bold", withExtension: "ttf")`
    static func interBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-ExtraBold", withExtension: "ttf")`
    static func interExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-ExtraLight", withExtension: "ttf")`
    static func interExtraLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interExtraLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-Light", withExtension: "ttf")`
    static func interLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-Medium", withExtension: "ttf")`
    static func interMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-Regular", withExtension: "ttf")`
    static func interRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-SemiBold", withExtension: "ttf")`
    static func interSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-Thin", withExtension: "ttf")`
    static func interThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-VariableFont_slnt,wght", withExtension: "ttf")`
    static func interVariableFont_slntWghtTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interVariableFont_slntWghtTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-Black", withExtension: "ttf")`
    static func montserratBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-BlackItalic", withExtension: "ttf")`
    static func montserratBlackItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratBlackItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-Bold", withExtension: "ttf")`
    static func montserratBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-BoldItalic", withExtension: "ttf")`
    static func montserratBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-ExtraBold", withExtension: "ttf")`
    static func montserratExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-ExtraBoldItalic", withExtension: "ttf")`
    static func montserratExtraBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratExtraBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-ExtraLight", withExtension: "ttf")`
    static func montserratExtraLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratExtraLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-ExtraLightItalic", withExtension: "ttf")`
    static func montserratExtraLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratExtraLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-Italic", withExtension: "ttf")`
    static func montserratItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-Italic-VariableFont_wght", withExtension: "ttf")`
    static func montserratItalicVariableFont_wghtTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratItalicVariableFont_wghtTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-Light", withExtension: "ttf")`
    static func montserratLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-LightItalic", withExtension: "ttf")`
    static func montserratLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-Medium", withExtension: "ttf")`
    static func montserratMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-MediumItalic", withExtension: "ttf")`
    static func montserratMediumItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratMediumItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-Regular", withExtension: "ttf")`
    static func montserratRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-SemiBold", withExtension: "ttf")`
    static func montserratSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-SemiBoldItalic", withExtension: "ttf")`
    static func montserratSemiBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratSemiBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-Thin", withExtension: "ttf")`
    static func montserratThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-ThinItalic", withExtension: "ttf")`
    static func montserratThinItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratThinItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Montserrat-VariableFont_wght", withExtension: "ttf")`
    static func montserratVariableFont_wghtTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratVariableFont_wghtTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Rubik-Black", withExtension: "ttf")`
    static func rubikBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rubikBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Rubik-BlackItalic", withExtension: "ttf")`
    static func rubikBlackItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rubikBlackItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Rubik-Bold", withExtension: "ttf")`
    static func rubikBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rubikBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Rubik-BoldItalic", withExtension: "ttf")`
    static func rubikBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rubikBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Rubik-ExtraBold", withExtension: "ttf")`
    static func rubikExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rubikExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Rubik-ExtraBoldItalic", withExtension: "ttf")`
    static func rubikExtraBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rubikExtraBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Rubik-Italic", withExtension: "ttf")`
    static func rubikItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rubikItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Rubik-Italic-VariableFont_wght", withExtension: "ttf")`
    static func rubikItalicVariableFont_wghtTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rubikItalicVariableFont_wghtTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Rubik-Light", withExtension: "ttf")`
    static func rubikLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rubikLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Rubik-LightItalic", withExtension: "ttf")`
    static func rubikLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rubikLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Rubik-Medium", withExtension: "ttf")`
    static func rubikMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rubikMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Rubik-MediumItalic", withExtension: "ttf")`
    static func rubikMediumItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rubikMediumItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Rubik-Regular", withExtension: "ttf")`
    static func rubikRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rubikRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Rubik-SemiBold", withExtension: "ttf")`
    static func rubikSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rubikSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Rubik-SemiBoldItalic", withExtension: "ttf")`
    static func rubikSemiBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rubikSemiBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Rubik-VariableFont_wght", withExtension: "ttf")`
    static func rubikVariableFont_wghtTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rubikVariableFont_wghtTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact", withExtension: "ttf")`
    static func sfCompactTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Display-Black", withExtension: "otf")`
    static func sfCompactDisplayBlackOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactDisplayBlackOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Display-Bold", withExtension: "otf")`
    static func sfCompactDisplayBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactDisplayBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Display-Heavy", withExtension: "otf")`
    static func sfCompactDisplayHeavyOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactDisplayHeavyOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Display-Light", withExtension: "otf")`
    static func sfCompactDisplayLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactDisplayLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Display-Medium", withExtension: "otf")`
    static func sfCompactDisplayMediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactDisplayMediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Display-Regular", withExtension: "otf")`
    static func sfCompactDisplayRegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactDisplayRegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Display-Semibold", withExtension: "otf")`
    static func sfCompactDisplaySemiboldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactDisplaySemiboldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Display-Thin", withExtension: "otf")`
    static func sfCompactDisplayThinOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactDisplayThinOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Display-Ultralight", withExtension: "otf")`
    static func sfCompactDisplayUltralightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactDisplayUltralightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Italic", withExtension: "ttf")`
    static func sfCompactItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Rounded-Black", withExtension: "otf")`
    static func sfCompactRoundedBlackOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactRoundedBlackOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Rounded-Bold", withExtension: "otf")`
    static func sfCompactRoundedBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactRoundedBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Rounded-Heavy", withExtension: "otf")`
    static func sfCompactRoundedHeavyOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactRoundedHeavyOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Rounded-Light", withExtension: "otf")`
    static func sfCompactRoundedLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactRoundedLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Rounded-Medium", withExtension: "otf")`
    static func sfCompactRoundedMediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactRoundedMediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Rounded-Regular", withExtension: "otf")`
    static func sfCompactRoundedRegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactRoundedRegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Rounded-Semibold", withExtension: "otf")`
    static func sfCompactRoundedSemiboldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactRoundedSemiboldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Rounded-Thin", withExtension: "otf")`
    static func sfCompactRoundedThinOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactRoundedThinOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Rounded-Ultralight", withExtension: "otf")`
    static func sfCompactRoundedUltralightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactRoundedUltralightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Text-Black", withExtension: "otf")`
    static func sfCompactTextBlackOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactTextBlackOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Text-BlackItalic", withExtension: "otf")`
    static func sfCompactTextBlackItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactTextBlackItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Text-Bold", withExtension: "otf")`
    static func sfCompactTextBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactTextBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Text-BoldItalic", withExtension: "otf")`
    static func sfCompactTextBoldItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactTextBoldItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Text-Heavy", withExtension: "otf")`
    static func sfCompactTextHeavyOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactTextHeavyOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Text-HeavyItalic", withExtension: "otf")`
    static func sfCompactTextHeavyItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactTextHeavyItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Text-Light", withExtension: "otf")`
    static func sfCompactTextLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactTextLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Text-LightItalic", withExtension: "otf")`
    static func sfCompactTextLightItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactTextLightItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Text-Medium", withExtension: "otf")`
    static func sfCompactTextMediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactTextMediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Text-MediumItalic", withExtension: "otf")`
    static func sfCompactTextMediumItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactTextMediumItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Text-Regular", withExtension: "otf")`
    static func sfCompactTextRegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactTextRegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Text-RegularItalic", withExtension: "otf")`
    static func sfCompactTextRegularItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactTextRegularItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Text-Semibold", withExtension: "otf")`
    static func sfCompactTextSemiboldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactTextSemiboldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Text-SemiboldItalic", withExtension: "otf")`
    static func sfCompactTextSemiboldItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactTextSemiboldItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Text-Thin", withExtension: "otf")`
    static func sfCompactTextThinOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactTextThinOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Text-ThinItalic", withExtension: "otf")`
    static func sfCompactTextThinItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactTextThinItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Text-Ultralight", withExtension: "otf")`
    static func sfCompactTextUltralightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactTextUltralightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Compact-Text-UltralightItalic", withExtension: "otf")`
    static func sfCompactTextUltralightItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfCompactTextUltralightItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro", withExtension: "ttf")`
    static func sfProTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-Black", withExtension: "otf")`
    static func sfProDisplayBlackOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayBlackOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-BlackItalic", withExtension: "otf")`
    static func sfProDisplayBlackItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayBlackItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-Bold", withExtension: "otf")`
    static func sfProDisplayBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-BoldItalic", withExtension: "otf")`
    static func sfProDisplayBoldItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayBoldItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-Heavy", withExtension: "otf")`
    static func sfProDisplayHeavyOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayHeavyOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-HeavyItalic", withExtension: "otf")`
    static func sfProDisplayHeavyItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayHeavyItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-Light", withExtension: "otf")`
    static func sfProDisplayLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-LightItalic", withExtension: "otf")`
    static func sfProDisplayLightItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayLightItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-Medium", withExtension: "otf")`
    static func sfProDisplayMediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayMediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-MediumItalic", withExtension: "otf")`
    static func sfProDisplayMediumItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayMediumItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-Regular", withExtension: "otf")`
    static func sfProDisplayRegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayRegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-RegularItalic", withExtension: "otf")`
    static func sfProDisplayRegularItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayRegularItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-Semibold", withExtension: "otf")`
    static func sfProDisplaySemiboldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplaySemiboldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-SemiboldItalic", withExtension: "otf")`
    static func sfProDisplaySemiboldItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplaySemiboldItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-Thin", withExtension: "otf")`
    static func sfProDisplayThinOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayThinOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-ThinItalic", withExtension: "otf")`
    static func sfProDisplayThinItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayThinItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-Ultralight", withExtension: "otf")`
    static func sfProDisplayUltralightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayUltralightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-UltralightItalic", withExtension: "otf")`
    static func sfProDisplayUltralightItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayUltralightItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Italic", withExtension: "ttf")`
    static func sfProItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Rounded-Black", withExtension: "otf")`
    static func sfProRoundedBlackOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProRoundedBlackOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Rounded-Bold", withExtension: "otf")`
    static func sfProRoundedBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProRoundedBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Rounded-Heavy", withExtension: "otf")`
    static func sfProRoundedHeavyOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProRoundedHeavyOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Rounded-Light", withExtension: "otf")`
    static func sfProRoundedLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProRoundedLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Rounded-Medium", withExtension: "otf")`
    static func sfProRoundedMediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProRoundedMediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Rounded-Regular", withExtension: "otf")`
    static func sfProRoundedRegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProRoundedRegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Rounded-Semibold", withExtension: "otf")`
    static func sfProRoundedSemiboldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProRoundedSemiboldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Rounded-Thin", withExtension: "otf")`
    static func sfProRoundedThinOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProRoundedThinOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Rounded-Ultralight", withExtension: "otf")`
    static func sfProRoundedUltralightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProRoundedUltralightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Text-Black", withExtension: "otf")`
    static func sfProTextBlackOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProTextBlackOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Text-BlackItalic", withExtension: "otf")`
    static func sfProTextBlackItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProTextBlackItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Text-Bold", withExtension: "otf")`
    static func sfProTextBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProTextBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Text-BoldItalic", withExtension: "otf")`
    static func sfProTextBoldItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProTextBoldItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Text-Heavy", withExtension: "otf")`
    static func sfProTextHeavyOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProTextHeavyOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Text-HeavyItalic", withExtension: "otf")`
    static func sfProTextHeavyItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProTextHeavyItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Text-Light", withExtension: "otf")`
    static func sfProTextLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProTextLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Text-LightItalic", withExtension: "otf")`
    static func sfProTextLightItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProTextLightItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Text-Medium", withExtension: "otf")`
    static func sfProTextMediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProTextMediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Text-MediumItalic", withExtension: "otf")`
    static func sfProTextMediumItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProTextMediumItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Text-Regular", withExtension: "otf")`
    static func sfProTextRegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProTextRegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Text-RegularItalic", withExtension: "otf")`
    static func sfProTextRegularItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProTextRegularItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Text-Semibold", withExtension: "otf")`
    static func sfProTextSemiboldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProTextSemiboldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Text-SemiboldItalic", withExtension: "otf")`
    static func sfProTextSemiboldItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProTextSemiboldItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Text-Thin", withExtension: "otf")`
    static func sfProTextThinOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProTextThinOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Text-ThinItalic", withExtension: "otf")`
    static func sfProTextThinItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProTextThinItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Text-Ultralight", withExtension: "otf")`
    static func sfProTextUltralightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProTextUltralightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Text-UltralightItalic", withExtension: "otf")`
    static func sfProTextUltralightItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProTextUltralightItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 132 fonts.
  struct font: Rswift.Validatable {
    /// Font `ArialUnicodeMS`.
    static let arialUnicodeMS = Rswift.FontResource(fontName: "ArialUnicodeMS")
    /// Font `Inter-Black`.
    static let interBlack = Rswift.FontResource(fontName: "Inter-Black")
    /// Font `Inter-Bold`.
    static let interBold = Rswift.FontResource(fontName: "Inter-Bold")
    /// Font `Inter-ExtraBold`.
    static let interExtraBold = Rswift.FontResource(fontName: "Inter-ExtraBold")
    /// Font `Inter-ExtraLight`.
    static let interExtraLight = Rswift.FontResource(fontName: "Inter-ExtraLight")
    /// Font `Inter-Light`.
    static let interLight = Rswift.FontResource(fontName: "Inter-Light")
    /// Font `Inter-Medium`.
    static let interMedium = Rswift.FontResource(fontName: "Inter-Medium")
    /// Font `Inter-SemiBold`.
    static let interSemiBold = Rswift.FontResource(fontName: "Inter-SemiBold")
    /// Font `Inter-Thin`.
    static let interThin = Rswift.FontResource(fontName: "Inter-Thin")
    /// Font `Montserrat-BlackItalic`.
    static let montserratBlackItalic = Rswift.FontResource(fontName: "Montserrat-BlackItalic")
    /// Font `Montserrat-Black`.
    static let montserratBlack = Rswift.FontResource(fontName: "Montserrat-Black")
    /// Font `Montserrat-BoldItalic`.
    static let montserratBoldItalic = Rswift.FontResource(fontName: "Montserrat-BoldItalic")
    /// Font `Montserrat-Bold`.
    static let montserratBold = Rswift.FontResource(fontName: "Montserrat-Bold")
    /// Font `Montserrat-ExtraBoldItalic`.
    static let montserratExtraBoldItalic = Rswift.FontResource(fontName: "Montserrat-ExtraBoldItalic")
    /// Font `Montserrat-ExtraBold`.
    static let montserratExtraBold = Rswift.FontResource(fontName: "Montserrat-ExtraBold")
    /// Font `Montserrat-ExtraLightItalic`.
    static let montserratExtraLightItalic = Rswift.FontResource(fontName: "Montserrat-ExtraLightItalic")
    /// Font `Montserrat-ExtraLight`.
    static let montserratExtraLight = Rswift.FontResource(fontName: "Montserrat-ExtraLight")
    /// Font `Montserrat-Italic`.
    static let montserratItalic = Rswift.FontResource(fontName: "Montserrat-Italic")
    /// Font `Montserrat-LightItalic`.
    static let montserratLightItalic = Rswift.FontResource(fontName: "Montserrat-LightItalic")
    /// Font `Montserrat-Light`.
    static let montserratLight = Rswift.FontResource(fontName: "Montserrat-Light")
    /// Font `Montserrat-MediumItalic`.
    static let montserratMediumItalic = Rswift.FontResource(fontName: "Montserrat-MediumItalic")
    /// Font `Montserrat-Medium`.
    static let montserratMedium = Rswift.FontResource(fontName: "Montserrat-Medium")
    /// Font `Montserrat-Regular`.
    static let montserratRegular = Rswift.FontResource(fontName: "Montserrat-Regular")
    /// Font `Montserrat-SemiBoldItalic`.
    static let montserratSemiBoldItalic = Rswift.FontResource(fontName: "Montserrat-SemiBoldItalic")
    /// Font `Montserrat-SemiBold`.
    static let montserratSemiBold = Rswift.FontResource(fontName: "Montserrat-SemiBold")
    /// Font `Rubik-BlackItalic`.
    static let rubikBlackItalic = Rswift.FontResource(fontName: "Rubik-BlackItalic")
    /// Font `Rubik-Black`.
    static let rubikBlack = Rswift.FontResource(fontName: "Rubik-Black")
    /// Font `Rubik-BoldItalic`.
    static let rubikBoldItalic = Rswift.FontResource(fontName: "Rubik-BoldItalic")
    /// Font `Rubik-Bold`.
    static let rubikBold = Rswift.FontResource(fontName: "Rubik-Bold")
    /// Font `Rubik-ExtraBoldItalic`.
    static let rubikExtraBoldItalic = Rswift.FontResource(fontName: "Rubik-ExtraBoldItalic")
    /// Font `Rubik-ExtraBold`.
    static let rubikExtraBold = Rswift.FontResource(fontName: "Rubik-ExtraBold")
    /// Font `Rubik-Italic`.
    static let rubikItalic = Rswift.FontResource(fontName: "Rubik-Italic")
    /// Font `Rubik-MediumItalic`.
    static let rubikMediumItalic = Rswift.FontResource(fontName: "Rubik-MediumItalic")
    /// Font `Rubik-Medium`.
    static let rubikMedium = Rswift.FontResource(fontName: "Rubik-Medium")
    /// Font `Rubik-Regular`.
    static let rubikRegular = Rswift.FontResource(fontName: "Rubik-Regular")
    /// Font `Rubik-SemiBoldItalic`.
    static let rubikSemiBoldItalic = Rswift.FontResource(fontName: "Rubik-SemiBoldItalic")
    /// Font `Rubik-SemiBold`.
    static let rubikSemiBold = Rswift.FontResource(fontName: "Rubik-SemiBold")
    /// Font `SFCompact-BlackItalic`.
    static let sfCompactBlackItalic = Rswift.FontResource(fontName: "SFCompact-BlackItalic")
    /// Font `SFCompact-Black`.
    static let sfCompactBlack = Rswift.FontResource(fontName: "SFCompact-Black")
    /// Font `SFCompactDisplay-Black`.
    static let sfCompactDisplayBlack = Rswift.FontResource(fontName: "SFCompactDisplay-Black")
    /// Font `SFCompactDisplay-Bold`.
    static let sfCompactDisplayBold = Rswift.FontResource(fontName: "SFCompactDisplay-Bold")
    /// Font `SFCompactDisplay-Heavy`.
    static let sfCompactDisplayHeavy = Rswift.FontResource(fontName: "SFCompactDisplay-Heavy")
    /// Font `SFCompactDisplay-Light`.
    static let sfCompactDisplayLight = Rswift.FontResource(fontName: "SFCompactDisplay-Light")
    /// Font `SFCompactDisplay-Medium`.
    static let sfCompactDisplayMedium = Rswift.FontResource(fontName: "SFCompactDisplay-Medium")
    /// Font `SFCompactDisplay-Regular`.
    static let sfCompactDisplayRegular = Rswift.FontResource(fontName: "SFCompactDisplay-Regular")
    /// Font `SFCompactDisplay-Semibold`.
    static let sfCompactDisplaySemibold = Rswift.FontResource(fontName: "SFCompactDisplay-Semibold")
    /// Font `SFCompactDisplay-Thin`.
    static let sfCompactDisplayThin = Rswift.FontResource(fontName: "SFCompactDisplay-Thin")
    /// Font `SFCompactDisplay-Ultralight`.
    static let sfCompactDisplayUltralight = Rswift.FontResource(fontName: "SFCompactDisplay-Ultralight")
    /// Font `SFCompactRounded-Black`.
    static let sfCompactRoundedBlack = Rswift.FontResource(fontName: "SFCompactRounded-Black")
    /// Font `SFCompactRounded-Bold`.
    static let sfCompactRoundedBold = Rswift.FontResource(fontName: "SFCompactRounded-Bold")
    /// Font `SFCompactRounded-Heavy`.
    static let sfCompactRoundedHeavy = Rswift.FontResource(fontName: "SFCompactRounded-Heavy")
    /// Font `SFCompactRounded-Light`.
    static let sfCompactRoundedLight = Rswift.FontResource(fontName: "SFCompactRounded-Light")
    /// Font `SFCompactRounded-Medium`.
    static let sfCompactRoundedMedium = Rswift.FontResource(fontName: "SFCompactRounded-Medium")
    /// Font `SFCompactRounded-Regular`.
    static let sfCompactRoundedRegular = Rswift.FontResource(fontName: "SFCompactRounded-Regular")
    /// Font `SFCompactRounded-Semibold`.
    static let sfCompactRoundedSemibold = Rswift.FontResource(fontName: "SFCompactRounded-Semibold")
    /// Font `SFCompactRounded-Thin`.
    static let sfCompactRoundedThin = Rswift.FontResource(fontName: "SFCompactRounded-Thin")
    /// Font `SFCompactRounded-Ultralight`.
    static let sfCompactRoundedUltralight = Rswift.FontResource(fontName: "SFCompactRounded-Ultralight")
    /// Font `SFCompactText-BlackItalic`.
    static let sfCompactTextBlackItalic = Rswift.FontResource(fontName: "SFCompactText-BlackItalic")
    /// Font `SFCompactText-Black`.
    static let sfCompactTextBlack = Rswift.FontResource(fontName: "SFCompactText-Black")
    /// Font `SFCompactText-BoldItalic`.
    static let sfCompactTextBoldItalic = Rswift.FontResource(fontName: "SFCompactText-BoldItalic")
    /// Font `SFCompactText-Bold`.
    static let sfCompactTextBold = Rswift.FontResource(fontName: "SFCompactText-Bold")
    /// Font `SFCompactText-HeavyItalic`.
    static let sfCompactTextHeavyItalic = Rswift.FontResource(fontName: "SFCompactText-HeavyItalic")
    /// Font `SFCompactText-Heavy`.
    static let sfCompactTextHeavy = Rswift.FontResource(fontName: "SFCompactText-Heavy")
    /// Font `SFCompactText-Italic`.
    static let sfCompactTextItalic = Rswift.FontResource(fontName: "SFCompactText-Italic")
    /// Font `SFCompactText-LightItalic`.
    static let sfCompactTextLightItalic = Rswift.FontResource(fontName: "SFCompactText-LightItalic")
    /// Font `SFCompactText-Light`.
    static let sfCompactTextLight = Rswift.FontResource(fontName: "SFCompactText-Light")
    /// Font `SFCompactText-MediumItalic`.
    static let sfCompactTextMediumItalic = Rswift.FontResource(fontName: "SFCompactText-MediumItalic")
    /// Font `SFCompactText-Medium`.
    static let sfCompactTextMedium = Rswift.FontResource(fontName: "SFCompactText-Medium")
    /// Font `SFCompactText-Regular`.
    static let sfCompactTextRegular = Rswift.FontResource(fontName: "SFCompactText-Regular")
    /// Font `SFCompactText-SemiboldItalic`.
    static let sfCompactTextSemiboldItalic = Rswift.FontResource(fontName: "SFCompactText-SemiboldItalic")
    /// Font `SFCompactText-Semibold`.
    static let sfCompactTextSemibold = Rswift.FontResource(fontName: "SFCompactText-Semibold")
    /// Font `SFCompactText-ThinItalic`.
    static let sfCompactTextThinItalic = Rswift.FontResource(fontName: "SFCompactText-ThinItalic")
    /// Font `SFCompactText-Thin`.
    static let sfCompactTextThin = Rswift.FontResource(fontName: "SFCompactText-Thin")
    /// Font `SFCompactText-UltralightItalic`.
    static let sfCompactTextUltralightItalic = Rswift.FontResource(fontName: "SFCompactText-UltralightItalic")
    /// Font `SFCompactText-Ultralight`.
    static let sfCompactTextUltralight = Rswift.FontResource(fontName: "SFCompactText-Ultralight")
    /// Font `SFPro-RegularItalic`.
    static let sfProRegularItalic = Rswift.FontResource(fontName: "SFPro-RegularItalic")
    /// Font `SFPro-Regular`.
    static let sfProRegular = Rswift.FontResource(fontName: "SFPro-Regular")
    /// Font `SFProDisplay-BlackItalic`.
    static let sfProDisplayBlackItalic = Rswift.FontResource(fontName: "SFProDisplay-BlackItalic")
    /// Font `SFProDisplay-Black`.
    static let sfProDisplayBlack = Rswift.FontResource(fontName: "SFProDisplay-Black")
    /// Font `SFProDisplay-BoldItalic`.
    static let sfProDisplayBoldItalic = Rswift.FontResource(fontName: "SFProDisplay-BoldItalic")
    /// Font `SFProDisplay-Bold`.
    static let sfProDisplayBold = Rswift.FontResource(fontName: "SFProDisplay-Bold")
    /// Font `SFProDisplay-HeavyItalic`.
    static let sfProDisplayHeavyItalic = Rswift.FontResource(fontName: "SFProDisplay-HeavyItalic")
    /// Font `SFProDisplay-Heavy`.
    static let sfProDisplayHeavy = Rswift.FontResource(fontName: "SFProDisplay-Heavy")
    /// Font `SFProDisplay-LightItalic`.
    static let sfProDisplayLightItalic = Rswift.FontResource(fontName: "SFProDisplay-LightItalic")
    /// Font `SFProDisplay-Light`.
    static let sfProDisplayLight = Rswift.FontResource(fontName: "SFProDisplay-Light")
    /// Font `SFProDisplay-MediumItalic`.
    static let sfProDisplayMediumItalic = Rswift.FontResource(fontName: "SFProDisplay-MediumItalic")
    /// Font `SFProDisplay-Medium`.
    static let sfProDisplayMedium = Rswift.FontResource(fontName: "SFProDisplay-Medium")
    /// Font `SFProDisplay-RegularItalic`.
    static let sfProDisplayRegularItalic = Rswift.FontResource(fontName: "SFProDisplay-RegularItalic")
    /// Font `SFProDisplay-Regular`.
    static let sfProDisplayRegular = Rswift.FontResource(fontName: "SFProDisplay-Regular")
    /// Font `SFProDisplay-SemiboldItalic`.
    static let sfProDisplaySemiboldItalic = Rswift.FontResource(fontName: "SFProDisplay-SemiboldItalic")
    /// Font `SFProDisplay-Semibold`.
    static let sfProDisplaySemibold = Rswift.FontResource(fontName: "SFProDisplay-Semibold")
    /// Font `SFProDisplay-ThinItalic`.
    static let sfProDisplayThinItalic = Rswift.FontResource(fontName: "SFProDisplay-ThinItalic")
    /// Font `SFProDisplay-Thin`.
    static let sfProDisplayThin = Rswift.FontResource(fontName: "SFProDisplay-Thin")
    /// Font `SFProDisplay-UltralightItalic`.
    static let sfProDisplayUltralightItalic = Rswift.FontResource(fontName: "SFProDisplay-UltralightItalic")
    /// Font `SFProDisplay-Ultralight`.
    static let sfProDisplayUltralight = Rswift.FontResource(fontName: "SFProDisplay-Ultralight")
    /// Font `SFProRounded-Black`.
    static let sfProRoundedBlack = Rswift.FontResource(fontName: "SFProRounded-Black")
    /// Font `SFProRounded-Bold`.
    static let sfProRoundedBold = Rswift.FontResource(fontName: "SFProRounded-Bold")
    /// Font `SFProRounded-Heavy`.
    static let sfProRoundedHeavy = Rswift.FontResource(fontName: "SFProRounded-Heavy")
    /// Font `SFProRounded-Light`.
    static let sfProRoundedLight = Rswift.FontResource(fontName: "SFProRounded-Light")
    /// Font `SFProRounded-Medium`.
    static let sfProRoundedMedium = Rswift.FontResource(fontName: "SFProRounded-Medium")
    /// Font `SFProRounded-Regular`.
    static let sfProRoundedRegular = Rswift.FontResource(fontName: "SFProRounded-Regular")
    /// Font `SFProRounded-Semibold`.
    static let sfProRoundedSemibold = Rswift.FontResource(fontName: "SFProRounded-Semibold")
    /// Font `SFProRounded-Thin`.
    static let sfProRoundedThin = Rswift.FontResource(fontName: "SFProRounded-Thin")
    /// Font `SFProRounded-Ultralight`.
    static let sfProRoundedUltralight = Rswift.FontResource(fontName: "SFProRounded-Ultralight")
    /// Font `SFProText-BlackItalic`.
    static let sfProTextBlackItalic = Rswift.FontResource(fontName: "SFProText-BlackItalic")
    /// Font `SFProText-Black`.
    static let sfProTextBlack = Rswift.FontResource(fontName: "SFProText-Black")
    /// Font `SFProText-BoldItalic`.
    static let sfProTextBoldItalic = Rswift.FontResource(fontName: "SFProText-BoldItalic")
    /// Font `SFProText-Bold`.
    static let sfProTextBold = Rswift.FontResource(fontName: "SFProText-Bold")
    /// Font `SFProText-HeavyItalic`.
    static let sfProTextHeavyItalic = Rswift.FontResource(fontName: "SFProText-HeavyItalic")
    /// Font `SFProText-Heavy`.
    static let sfProTextHeavy = Rswift.FontResource(fontName: "SFProText-Heavy")
    /// Font `SFProText-LightItalic`.
    static let sfProTextLightItalic = Rswift.FontResource(fontName: "SFProText-LightItalic")
    /// Font `SFProText-Light`.
    static let sfProTextLight = Rswift.FontResource(fontName: "SFProText-Light")
    /// Font `SFProText-MediumItalic`.
    static let sfProTextMediumItalic = Rswift.FontResource(fontName: "SFProText-MediumItalic")
    /// Font `SFProText-Medium`.
    static let sfProTextMedium = Rswift.FontResource(fontName: "SFProText-Medium")
    /// Font `SFProText-RegularItalic`.
    static let sfProTextRegularItalic = Rswift.FontResource(fontName: "SFProText-RegularItalic")
    /// Font `SFProText-Regular`.
    static let sfProTextRegular = Rswift.FontResource(fontName: "SFProText-Regular")
    /// Font `SFProText-SemiboldItalic`.
    static let sfProTextSemiboldItalic = Rswift.FontResource(fontName: "SFProText-SemiboldItalic")
    /// Font `SFProText-Semibold`.
    static let sfProTextSemibold = Rswift.FontResource(fontName: "SFProText-Semibold")
    /// Font `SFProText-ThinItalic`.
    static let sfProTextThinItalic = Rswift.FontResource(fontName: "SFProText-ThinItalic")
    /// Font `SFProText-Thin`.
    static let sfProTextThin = Rswift.FontResource(fontName: "SFProText-Thin")
    /// Font `SFProText-UltralightItalic`.
    static let sfProTextUltralightItalic = Rswift.FontResource(fontName: "SFProText-UltralightItalic")
    /// Font `SFProText-Ultralight`.
    static let sfProTextUltralight = Rswift.FontResource(fontName: "SFProText-Ultralight")

    /// `UIFont(name: "ArialUnicodeMS", size: ...)`
    static func arialUnicodeMS(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: arialUnicodeMS, size: size)
    }

    /// `UIFont(name: "Inter-Black", size: ...)`
    static func interBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interBlack, size: size)
    }

    /// `UIFont(name: "Inter-Bold", size: ...)`
    static func interBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interBold, size: size)
    }

    /// `UIFont(name: "Inter-ExtraBold", size: ...)`
    static func interExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interExtraBold, size: size)
    }

    /// `UIFont(name: "Inter-ExtraLight", size: ...)`
    static func interExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interExtraLight, size: size)
    }

    /// `UIFont(name: "Inter-Light", size: ...)`
    static func interLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interLight, size: size)
    }

    /// `UIFont(name: "Inter-Medium", size: ...)`
    static func interMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interMedium, size: size)
    }

    /// `UIFont(name: "Inter-SemiBold", size: ...)`
    static func interSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interSemiBold, size: size)
    }

    /// `UIFont(name: "Inter-Thin", size: ...)`
    static func interThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interThin, size: size)
    }

    /// `UIFont(name: "Montserrat-Black", size: ...)`
    static func montserratBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratBlack, size: size)
    }

    /// `UIFont(name: "Montserrat-BlackItalic", size: ...)`
    static func montserratBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratBlackItalic, size: size)
    }

    /// `UIFont(name: "Montserrat-Bold", size: ...)`
    static func montserratBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratBold, size: size)
    }

    /// `UIFont(name: "Montserrat-BoldItalic", size: ...)`
    static func montserratBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratBoldItalic, size: size)
    }

    /// `UIFont(name: "Montserrat-ExtraBold", size: ...)`
    static func montserratExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratExtraBold, size: size)
    }

    /// `UIFont(name: "Montserrat-ExtraBoldItalic", size: ...)`
    static func montserratExtraBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratExtraBoldItalic, size: size)
    }

    /// `UIFont(name: "Montserrat-ExtraLight", size: ...)`
    static func montserratExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratExtraLight, size: size)
    }

    /// `UIFont(name: "Montserrat-ExtraLightItalic", size: ...)`
    static func montserratExtraLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratExtraLightItalic, size: size)
    }

    /// `UIFont(name: "Montserrat-Italic", size: ...)`
    static func montserratItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratItalic, size: size)
    }

    /// `UIFont(name: "Montserrat-Light", size: ...)`
    static func montserratLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratLight, size: size)
    }

    /// `UIFont(name: "Montserrat-LightItalic", size: ...)`
    static func montserratLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratLightItalic, size: size)
    }

    /// `UIFont(name: "Montserrat-Medium", size: ...)`
    static func montserratMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratMedium, size: size)
    }

    /// `UIFont(name: "Montserrat-MediumItalic", size: ...)`
    static func montserratMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratMediumItalic, size: size)
    }

    /// `UIFont(name: "Montserrat-Regular", size: ...)`
    static func montserratRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratRegular, size: size)
    }

    /// `UIFont(name: "Montserrat-SemiBold", size: ...)`
    static func montserratSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratSemiBold, size: size)
    }

    /// `UIFont(name: "Montserrat-SemiBoldItalic", size: ...)`
    static func montserratSemiBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratSemiBoldItalic, size: size)
    }

    /// `UIFont(name: "Rubik-Black", size: ...)`
    static func rubikBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: rubikBlack, size: size)
    }

    /// `UIFont(name: "Rubik-BlackItalic", size: ...)`
    static func rubikBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: rubikBlackItalic, size: size)
    }

    /// `UIFont(name: "Rubik-Bold", size: ...)`
    static func rubikBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: rubikBold, size: size)
    }

    /// `UIFont(name: "Rubik-BoldItalic", size: ...)`
    static func rubikBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: rubikBoldItalic, size: size)
    }

    /// `UIFont(name: "Rubik-ExtraBold", size: ...)`
    static func rubikExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: rubikExtraBold, size: size)
    }

    /// `UIFont(name: "Rubik-ExtraBoldItalic", size: ...)`
    static func rubikExtraBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: rubikExtraBoldItalic, size: size)
    }

    /// `UIFont(name: "Rubik-Italic", size: ...)`
    static func rubikItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: rubikItalic, size: size)
    }

    /// `UIFont(name: "Rubik-Medium", size: ...)`
    static func rubikMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: rubikMedium, size: size)
    }

    /// `UIFont(name: "Rubik-MediumItalic", size: ...)`
    static func rubikMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: rubikMediumItalic, size: size)
    }

    /// `UIFont(name: "Rubik-Regular", size: ...)`
    static func rubikRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: rubikRegular, size: size)
    }

    /// `UIFont(name: "Rubik-SemiBold", size: ...)`
    static func rubikSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: rubikSemiBold, size: size)
    }

    /// `UIFont(name: "Rubik-SemiBoldItalic", size: ...)`
    static func rubikSemiBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: rubikSemiBoldItalic, size: size)
    }

    /// `UIFont(name: "SFCompact-Black", size: ...)`
    static func sfCompactBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfCompactBlack, size: size)
    }

    /// `UIFont(name: "SFCompact-BlackItalic", size: ...)`
    static func sfCompactBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfCompactBlackItalic, size: size)
    }

    /// `UIFont(name: "SFCompactDisplay-Black", size: ...)`
    static func sfCompactDisplayBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfCompactDisplayBlack, size: size)
    }

    /// `UIFont(name: "SFCompactDisplay-Bold", size: ...)`
    static func sfCompactDisplayBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfCompactDisplayBold, size: size)
    }

    /// `UIFont(name: "SFCompactDisplay-Heavy", size: ...)`
    static func sfCompactDisplayHeavy(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfCompactDisplayHeavy, size: size)
    }

    /// `UIFont(name: "SFCompactDisplay-Light", size: ...)`
    static func sfCompactDisplayLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfCompactDisplayLight, size: size)
    }

    /// `UIFont(name: "SFCompactDisplay-Medium", size: ...)`
    static func sfCompactDisplayMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfCompactDisplayMedium, size: size)
    }

    /// `UIFont(name: "SFCompactDisplay-Regular", size: ...)`
    static func sfCompactDisplayRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfCompactDisplayRegular, size: size)
    }

    /// `UIFont(name: "SFCompactDisplay-Semibold", size: ...)`
    static func sfCompactDisplaySemibold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfCompactDisplaySemibold, size: size)
    }

    /// `UIFont(name: "SFCompactDisplay-Thin", size: ...)`
    static func sfCompactDisplayThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfCompactDisplayThin, size: size)
    }

    /// `UIFont(name: "SFCompactDisplay-Ultralight", size: ...)`
    static func sfCompactDisplayUltralight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfCompactDisplayUltralight, size: size)
    }

    /// `UIFont(name: "SFCompactRounded-Black", size: ...)`
    static func sfCompactRoundedBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfCompactRoundedBlack, size: size)
    }

    /// `UIFont(name: "SFCompactRounded-Bold", size: ...)`
    static func sfCompactRoundedBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfCompactRoundedBold, size: size)
    }

    /// `UIFont(name: "SFCompactRounded-Heavy", size: ...)`
    static func sfCompactRoundedHeavy(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfCompactRoundedHeavy, size: size)
    }

    /// `UIFont(name: "SFCompactRounded-Light", size: ...)`
    static func sfCompactRoundedLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfCompactRoundedLight, size: size)
    }

    /// `UIFont(name: "SFCompactRounded-Medium", size: ...)`
    static func sfCompactRoundedMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfCompactRoundedMedium, size: size)
    }

    /// `UIFont(name: "SFCompactRounded-Regular", size: ...)`
    static func sfCompactRoundedRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfCompactRoundedRegular, size: size)
    }

    /// `UIFont(name: "SFCompactRounded-Semibold", size: ...)`
    static func sfCompactRoundedSemibold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfCompactRoundedSemibold, size: size)
    }

    /// `UIFont(name: "SFCompactRounded-Thin", size: ...)`
    static func sfCompactRoundedThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfCompactRoundedThin, size: size)
    }

    /// `UIFont(name: "SFCompactRounded-Ultralight", size: ...)`
    static func sfCompactRoundedUltralight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfCompactRoundedUltralight, size: size)
    }

    /// `UIFont(name: "SFCompactText-Black", size: ...)`
    static func sfCompactTextBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfCompactTextBlack, size: size)
    }

    /// `UIFont(name: "SFCompactText-BlackItalic", size: ...)`
    static func sfCompactTextBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfCompactTextBlackItalic, size: size)
    }

    /// `UIFont(name: "SFCompactText-Bold", size: ...)`
    static func sfCompactTextBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfCompactTextBold, size: size)
    }

    /// `UIFont(name: "SFCompactText-BoldItalic", size: ...)`
    static func sfCompactTextBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfCompactTextBoldItalic, size: size)
    }

    /// `UIFont(name: "SFCompactText-Heavy", size: ...)`
    static func sfCompactTextHeavy(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfCompactTextHeavy, size: size)
    }

    /// `UIFont(name: "SFCompactText-HeavyItalic", size: ...)`
    static func sfCompactTextHeavyItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfCompactTextHeavyItalic, size: size)
    }

    /// `UIFont(name: "SFCompactText-Italic", size: ...)`
    static func sfCompactTextItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfCompactTextItalic, size: size)
    }

    /// `UIFont(name: "SFCompactText-Light", size: ...)`
    static func sfCompactTextLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfCompactTextLight, size: size)
    }

    /// `UIFont(name: "SFCompactText-LightItalic", size: ...)`
    static func sfCompactTextLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfCompactTextLightItalic, size: size)
    }

    /// `UIFont(name: "SFCompactText-Medium", size: ...)`
    static func sfCompactTextMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfCompactTextMedium, size: size)
    }

    /// `UIFont(name: "SFCompactText-MediumItalic", size: ...)`
    static func sfCompactTextMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfCompactTextMediumItalic, size: size)
    }

    /// `UIFont(name: "SFCompactText-Regular", size: ...)`
    static func sfCompactTextRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfCompactTextRegular, size: size)
    }

    /// `UIFont(name: "SFCompactText-Semibold", size: ...)`
    static func sfCompactTextSemibold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfCompactTextSemibold, size: size)
    }

    /// `UIFont(name: "SFCompactText-SemiboldItalic", size: ...)`
    static func sfCompactTextSemiboldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfCompactTextSemiboldItalic, size: size)
    }

    /// `UIFont(name: "SFCompactText-Thin", size: ...)`
    static func sfCompactTextThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfCompactTextThin, size: size)
    }

    /// `UIFont(name: "SFCompactText-ThinItalic", size: ...)`
    static func sfCompactTextThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfCompactTextThinItalic, size: size)
    }

    /// `UIFont(name: "SFCompactText-Ultralight", size: ...)`
    static func sfCompactTextUltralight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfCompactTextUltralight, size: size)
    }

    /// `UIFont(name: "SFCompactText-UltralightItalic", size: ...)`
    static func sfCompactTextUltralightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfCompactTextUltralightItalic, size: size)
    }

    /// `UIFont(name: "SFPro-Regular", size: ...)`
    static func sfProRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProRegular, size: size)
    }

    /// `UIFont(name: "SFPro-RegularItalic", size: ...)`
    static func sfProRegularItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProRegularItalic, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Black", size: ...)`
    static func sfProDisplayBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayBlack, size: size)
    }

    /// `UIFont(name: "SFProDisplay-BlackItalic", size: ...)`
    static func sfProDisplayBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayBlackItalic, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Bold", size: ...)`
    static func sfProDisplayBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayBold, size: size)
    }

    /// `UIFont(name: "SFProDisplay-BoldItalic", size: ...)`
    static func sfProDisplayBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayBoldItalic, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Heavy", size: ...)`
    static func sfProDisplayHeavy(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayHeavy, size: size)
    }

    /// `UIFont(name: "SFProDisplay-HeavyItalic", size: ...)`
    static func sfProDisplayHeavyItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayHeavyItalic, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Light", size: ...)`
    static func sfProDisplayLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayLight, size: size)
    }

    /// `UIFont(name: "SFProDisplay-LightItalic", size: ...)`
    static func sfProDisplayLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayLightItalic, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Medium", size: ...)`
    static func sfProDisplayMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayMedium, size: size)
    }

    /// `UIFont(name: "SFProDisplay-MediumItalic", size: ...)`
    static func sfProDisplayMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayMediumItalic, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Regular", size: ...)`
    static func sfProDisplayRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayRegular, size: size)
    }

    /// `UIFont(name: "SFProDisplay-RegularItalic", size: ...)`
    static func sfProDisplayRegularItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayRegularItalic, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Semibold", size: ...)`
    static func sfProDisplaySemibold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplaySemibold, size: size)
    }

    /// `UIFont(name: "SFProDisplay-SemiboldItalic", size: ...)`
    static func sfProDisplaySemiboldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplaySemiboldItalic, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Thin", size: ...)`
    static func sfProDisplayThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayThin, size: size)
    }

    /// `UIFont(name: "SFProDisplay-ThinItalic", size: ...)`
    static func sfProDisplayThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayThinItalic, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Ultralight", size: ...)`
    static func sfProDisplayUltralight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayUltralight, size: size)
    }

    /// `UIFont(name: "SFProDisplay-UltralightItalic", size: ...)`
    static func sfProDisplayUltralightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayUltralightItalic, size: size)
    }

    /// `UIFont(name: "SFProRounded-Black", size: ...)`
    static func sfProRoundedBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProRoundedBlack, size: size)
    }

    /// `UIFont(name: "SFProRounded-Bold", size: ...)`
    static func sfProRoundedBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProRoundedBold, size: size)
    }

    /// `UIFont(name: "SFProRounded-Heavy", size: ...)`
    static func sfProRoundedHeavy(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProRoundedHeavy, size: size)
    }

    /// `UIFont(name: "SFProRounded-Light", size: ...)`
    static func sfProRoundedLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProRoundedLight, size: size)
    }

    /// `UIFont(name: "SFProRounded-Medium", size: ...)`
    static func sfProRoundedMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProRoundedMedium, size: size)
    }

    /// `UIFont(name: "SFProRounded-Regular", size: ...)`
    static func sfProRoundedRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProRoundedRegular, size: size)
    }

    /// `UIFont(name: "SFProRounded-Semibold", size: ...)`
    static func sfProRoundedSemibold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProRoundedSemibold, size: size)
    }

    /// `UIFont(name: "SFProRounded-Thin", size: ...)`
    static func sfProRoundedThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProRoundedThin, size: size)
    }

    /// `UIFont(name: "SFProRounded-Ultralight", size: ...)`
    static func sfProRoundedUltralight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProRoundedUltralight, size: size)
    }

    /// `UIFont(name: "SFProText-Black", size: ...)`
    static func sfProTextBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextBlack, size: size)
    }

    /// `UIFont(name: "SFProText-BlackItalic", size: ...)`
    static func sfProTextBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextBlackItalic, size: size)
    }

    /// `UIFont(name: "SFProText-Bold", size: ...)`
    static func sfProTextBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextBold, size: size)
    }

    /// `UIFont(name: "SFProText-BoldItalic", size: ...)`
    static func sfProTextBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextBoldItalic, size: size)
    }

    /// `UIFont(name: "SFProText-Heavy", size: ...)`
    static func sfProTextHeavy(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextHeavy, size: size)
    }

    /// `UIFont(name: "SFProText-HeavyItalic", size: ...)`
    static func sfProTextHeavyItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextHeavyItalic, size: size)
    }

    /// `UIFont(name: "SFProText-Light", size: ...)`
    static func sfProTextLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextLight, size: size)
    }

    /// `UIFont(name: "SFProText-LightItalic", size: ...)`
    static func sfProTextLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextLightItalic, size: size)
    }

    /// `UIFont(name: "SFProText-Medium", size: ...)`
    static func sfProTextMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextMedium, size: size)
    }

    /// `UIFont(name: "SFProText-MediumItalic", size: ...)`
    static func sfProTextMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextMediumItalic, size: size)
    }

    /// `UIFont(name: "SFProText-Regular", size: ...)`
    static func sfProTextRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextRegular, size: size)
    }

    /// `UIFont(name: "SFProText-RegularItalic", size: ...)`
    static func sfProTextRegularItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextRegularItalic, size: size)
    }

    /// `UIFont(name: "SFProText-Semibold", size: ...)`
    static func sfProTextSemibold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextSemibold, size: size)
    }

    /// `UIFont(name: "SFProText-SemiboldItalic", size: ...)`
    static func sfProTextSemiboldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextSemiboldItalic, size: size)
    }

    /// `UIFont(name: "SFProText-Thin", size: ...)`
    static func sfProTextThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextThin, size: size)
    }

    /// `UIFont(name: "SFProText-ThinItalic", size: ...)`
    static func sfProTextThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextThinItalic, size: size)
    }

    /// `UIFont(name: "SFProText-Ultralight", size: ...)`
    static func sfProTextUltralight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextUltralight, size: size)
    }

    /// `UIFont(name: "SFProText-UltralightItalic", size: ...)`
    static func sfProTextUltralightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextUltralightItalic, size: size)
    }

    static func validate() throws {
      if R.font.arialUnicodeMS(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'ArialUnicodeMS' could not be loaded, is 'Arial Unicode.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-Black' could not be loaded, is 'Inter-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-Bold' could not be loaded, is 'Inter-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-ExtraBold' could not be loaded, is 'Inter-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-ExtraLight' could not be loaded, is 'Inter-ExtraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-Light' could not be loaded, is 'Inter-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-Medium' could not be loaded, is 'Inter-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-SemiBold' could not be loaded, is 'Inter-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-Thin' could not be loaded, is 'Inter-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-Black' could not be loaded, is 'Montserrat-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-BlackItalic' could not be loaded, is 'Montserrat-BlackItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-Bold' could not be loaded, is 'Montserrat-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-BoldItalic' could not be loaded, is 'Montserrat-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-ExtraBold' could not be loaded, is 'Montserrat-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratExtraBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-ExtraBoldItalic' could not be loaded, is 'Montserrat-ExtraBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-ExtraLight' could not be loaded, is 'Montserrat-ExtraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratExtraLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-ExtraLightItalic' could not be loaded, is 'Montserrat-ExtraLightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-Italic' could not be loaded, is 'Montserrat-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-Light' could not be loaded, is 'Montserrat-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-LightItalic' could not be loaded, is 'Montserrat-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-Medium' could not be loaded, is 'Montserrat-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-MediumItalic' could not be loaded, is 'Montserrat-MediumItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-Regular' could not be loaded, is 'Montserrat-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-SemiBold' could not be loaded, is 'Montserrat-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratSemiBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-SemiBoldItalic' could not be loaded, is 'Montserrat-SemiBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.rubikBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Rubik-Black' could not be loaded, is 'Rubik-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.rubikBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Rubik-BlackItalic' could not be loaded, is 'Rubik-BlackItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.rubikBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Rubik-Bold' could not be loaded, is 'Rubik-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.rubikBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Rubik-BoldItalic' could not be loaded, is 'Rubik-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.rubikExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Rubik-ExtraBold' could not be loaded, is 'Rubik-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.rubikExtraBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Rubik-ExtraBoldItalic' could not be loaded, is 'Rubik-ExtraBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.rubikItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Rubik-Italic' could not be loaded, is 'Rubik-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.rubikMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Rubik-Medium' could not be loaded, is 'Rubik-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.rubikMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Rubik-MediumItalic' could not be loaded, is 'Rubik-MediumItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.rubikRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Rubik-Regular' could not be loaded, is 'Rubik-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.rubikSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Rubik-SemiBold' could not be loaded, is 'Rubik-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.rubikSemiBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Rubik-SemiBoldItalic' could not be loaded, is 'Rubik-SemiBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfCompactBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFCompact-Black' could not be loaded, is 'SF-Compact.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfCompactBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFCompact-BlackItalic' could not be loaded, is 'SF-Compact-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfCompactDisplayBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFCompactDisplay-Black' could not be loaded, is 'SF-Compact-Display-Black.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfCompactDisplayBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFCompactDisplay-Bold' could not be loaded, is 'SF-Compact-Display-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfCompactDisplayHeavy(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFCompactDisplay-Heavy' could not be loaded, is 'SF-Compact-Display-Heavy.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfCompactDisplayLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFCompactDisplay-Light' could not be loaded, is 'SF-Compact-Display-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfCompactDisplayMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFCompactDisplay-Medium' could not be loaded, is 'SF-Compact-Display-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfCompactDisplayRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFCompactDisplay-Regular' could not be loaded, is 'SF-Compact-Display-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfCompactDisplaySemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFCompactDisplay-Semibold' could not be loaded, is 'SF-Compact-Display-Semibold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfCompactDisplayThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFCompactDisplay-Thin' could not be loaded, is 'SF-Compact-Display-Thin.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfCompactDisplayUltralight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFCompactDisplay-Ultralight' could not be loaded, is 'SF-Compact-Display-Ultralight.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfCompactRoundedBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFCompactRounded-Black' could not be loaded, is 'SF-Compact-Rounded-Black.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfCompactRoundedBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFCompactRounded-Bold' could not be loaded, is 'SF-Compact-Rounded-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfCompactRoundedHeavy(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFCompactRounded-Heavy' could not be loaded, is 'SF-Compact-Rounded-Heavy.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfCompactRoundedLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFCompactRounded-Light' could not be loaded, is 'SF-Compact-Rounded-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfCompactRoundedMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFCompactRounded-Medium' could not be loaded, is 'SF-Compact-Rounded-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfCompactRoundedRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFCompactRounded-Regular' could not be loaded, is 'SF-Compact-Rounded-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfCompactRoundedSemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFCompactRounded-Semibold' could not be loaded, is 'SF-Compact-Rounded-Semibold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfCompactRoundedThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFCompactRounded-Thin' could not be loaded, is 'SF-Compact-Rounded-Thin.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfCompactRoundedUltralight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFCompactRounded-Ultralight' could not be loaded, is 'SF-Compact-Rounded-Ultralight.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfCompactTextBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFCompactText-Black' could not be loaded, is 'SF-Compact-Text-Black.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfCompactTextBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFCompactText-BlackItalic' could not be loaded, is 'SF-Compact-Text-BlackItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfCompactTextBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFCompactText-Bold' could not be loaded, is 'SF-Compact-Text-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfCompactTextBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFCompactText-BoldItalic' could not be loaded, is 'SF-Compact-Text-BoldItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfCompactTextHeavy(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFCompactText-Heavy' could not be loaded, is 'SF-Compact-Text-Heavy.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfCompactTextHeavyItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFCompactText-HeavyItalic' could not be loaded, is 'SF-Compact-Text-HeavyItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfCompactTextItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFCompactText-Italic' could not be loaded, is 'SF-Compact-Text-RegularItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfCompactTextLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFCompactText-Light' could not be loaded, is 'SF-Compact-Text-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfCompactTextLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFCompactText-LightItalic' could not be loaded, is 'SF-Compact-Text-LightItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfCompactTextMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFCompactText-Medium' could not be loaded, is 'SF-Compact-Text-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfCompactTextMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFCompactText-MediumItalic' could not be loaded, is 'SF-Compact-Text-MediumItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfCompactTextRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFCompactText-Regular' could not be loaded, is 'SF-Compact-Text-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfCompactTextSemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFCompactText-Semibold' could not be loaded, is 'SF-Compact-Text-Semibold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfCompactTextSemiboldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFCompactText-SemiboldItalic' could not be loaded, is 'SF-Compact-Text-SemiboldItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfCompactTextThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFCompactText-Thin' could not be loaded, is 'SF-Compact-Text-Thin.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfCompactTextThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFCompactText-ThinItalic' could not be loaded, is 'SF-Compact-Text-ThinItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfCompactTextUltralight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFCompactText-Ultralight' could not be loaded, is 'SF-Compact-Text-Ultralight.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfCompactTextUltralightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFCompactText-UltralightItalic' could not be loaded, is 'SF-Compact-Text-UltralightItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFPro-Regular' could not be loaded, is 'SF-Pro.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProRegularItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFPro-RegularItalic' could not be loaded, is 'SF-Pro-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Black' could not be loaded, is 'SF-Pro-Display-Black.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-BlackItalic' could not be loaded, is 'SF-Pro-Display-BlackItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Bold' could not be loaded, is 'SF-Pro-Display-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-BoldItalic' could not be loaded, is 'SF-Pro-Display-BoldItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayHeavy(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Heavy' could not be loaded, is 'SF-Pro-Display-Heavy.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayHeavyItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-HeavyItalic' could not be loaded, is 'SF-Pro-Display-HeavyItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Light' could not be loaded, is 'SF-Pro-Display-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-LightItalic' could not be loaded, is 'SF-Pro-Display-LightItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Medium' could not be loaded, is 'SF-Pro-Display-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-MediumItalic' could not be loaded, is 'SF-Pro-Display-MediumItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Regular' could not be loaded, is 'SF-Pro-Display-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayRegularItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-RegularItalic' could not be loaded, is 'SF-Pro-Display-RegularItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplaySemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Semibold' could not be loaded, is 'SF-Pro-Display-Semibold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplaySemiboldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-SemiboldItalic' could not be loaded, is 'SF-Pro-Display-SemiboldItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Thin' could not be loaded, is 'SF-Pro-Display-Thin.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-ThinItalic' could not be loaded, is 'SF-Pro-Display-ThinItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayUltralight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Ultralight' could not be loaded, is 'SF-Pro-Display-Ultralight.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayUltralightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-UltralightItalic' could not be loaded, is 'SF-Pro-Display-UltralightItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProRoundedBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProRounded-Black' could not be loaded, is 'SF-Pro-Rounded-Black.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProRoundedBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProRounded-Bold' could not be loaded, is 'SF-Pro-Rounded-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProRoundedHeavy(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProRounded-Heavy' could not be loaded, is 'SF-Pro-Rounded-Heavy.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProRoundedLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProRounded-Light' could not be loaded, is 'SF-Pro-Rounded-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProRoundedMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProRounded-Medium' could not be loaded, is 'SF-Pro-Rounded-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProRoundedRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProRounded-Regular' could not be loaded, is 'SF-Pro-Rounded-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProRoundedSemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProRounded-Semibold' could not be loaded, is 'SF-Pro-Rounded-Semibold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProRoundedThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProRounded-Thin' could not be loaded, is 'SF-Pro-Rounded-Thin.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProRoundedUltralight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProRounded-Ultralight' could not be loaded, is 'SF-Pro-Rounded-Ultralight.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Black' could not be loaded, is 'SF-Pro-Text-Black.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-BlackItalic' could not be loaded, is 'SF-Pro-Text-BlackItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Bold' could not be loaded, is 'SF-Pro-Text-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-BoldItalic' could not be loaded, is 'SF-Pro-Text-BoldItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextHeavy(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Heavy' could not be loaded, is 'SF-Pro-Text-Heavy.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextHeavyItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-HeavyItalic' could not be loaded, is 'SF-Pro-Text-HeavyItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Light' could not be loaded, is 'SF-Pro-Text-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-LightItalic' could not be loaded, is 'SF-Pro-Text-LightItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Medium' could not be loaded, is 'SF-Pro-Text-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-MediumItalic' could not be loaded, is 'SF-Pro-Text-MediumItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Regular' could not be loaded, is 'SF-Pro-Text-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextRegularItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-RegularItalic' could not be loaded, is 'SF-Pro-Text-RegularItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextSemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Semibold' could not be loaded, is 'SF-Pro-Text-Semibold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextSemiboldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-SemiboldItalic' could not be loaded, is 'SF-Pro-Text-SemiboldItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Thin' could not be loaded, is 'SF-Pro-Text-Thin.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-ThinItalic' could not be loaded, is 'SF-Pro-Text-ThinItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextUltralight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Ultralight' could not be loaded, is 'SF-Pro-Text-Ultralight.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextUltralightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-UltralightItalic' could not be loaded, is 'SF-Pro-Text-UltralightItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 240 images.
  struct image {
    /// Image `activity`.
    static let activity = Rswift.ImageResource(bundle: R.hostingBundle, name: "activity")
    /// Image `airplay`.
    static let airplay = Rswift.ImageResource(bundle: R.hostingBundle, name: "airplay")
    /// Image `alert-circle`.
    static let alertCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "alert-circle")
    /// Image `alert-octagon`.
    static let alertOctagon = Rswift.ImageResource(bundle: R.hostingBundle, name: "alert-octagon")
    /// Image `alert-triangle`.
    static let alertTriangle = Rswift.ImageResource(bundle: R.hostingBundle, name: "alert-triangle")
    /// Image `align-center`.
    static let alignCenter = Rswift.ImageResource(bundle: R.hostingBundle, name: "align-center")
    /// Image `align-justify`.
    static let alignJustify = Rswift.ImageResource(bundle: R.hostingBundle, name: "align-justify")
    /// Image `align-left`.
    static let alignLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "align-left")
    /// Image `align-right`.
    static let alignRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "align-right")
    /// Image `anchor`.
    static let anchor = Rswift.ImageResource(bundle: R.hostingBundle, name: "anchor")
    /// Image `aperture`.
    static let aperture = Rswift.ImageResource(bundle: R.hostingBundle, name: "aperture")
    /// Image `arrow-down-left`.
    static let arrowDownLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow-down-left")
    /// Image `arrow-down-right`.
    static let arrowDownRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow-down-right")
    /// Image `arrow-down`.
    static let arrowDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow-down")
    /// Image `arrow-left`.
    static let arrowLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow-left")
    /// Image `arrow-right`.
    static let arrowRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow-right")
    /// Image `arrow-up-left`.
    static let arrowUpLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow-up-left")
    /// Image `arrow-up-right`.
    static let arrowUpRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow-up-right")
    /// Image `arrow-up`.
    static let arrowUp = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow-up")
    /// Image `at-sign`.
    static let atSign = Rswift.ImageResource(bundle: R.hostingBundle, name: "at-sign")
    /// Image `award`.
    static let award = Rswift.ImageResource(bundle: R.hostingBundle, name: "award")
    /// Image `bar-chart-2`.
    static let barChart2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bar-chart-2")
    /// Image `bar-chart`.
    static let barChart = Rswift.ImageResource(bundle: R.hostingBundle, name: "bar-chart")
    /// Image `battery-charging`.
    static let batteryCharging = Rswift.ImageResource(bundle: R.hostingBundle, name: "battery-charging")
    /// Image `battery`.
    static let battery = Rswift.ImageResource(bundle: R.hostingBundle, name: "battery")
    /// Image `bell-off`.
    static let bellOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "bell-off")
    /// Image `bell`.
    static let bell = Rswift.ImageResource(bundle: R.hostingBundle, name: "bell")
    /// Image `bluetooth`.
    static let bluetooth = Rswift.ImageResource(bundle: R.hostingBundle, name: "bluetooth")
    /// Image `bold`.
    static let bold = Rswift.ImageResource(bundle: R.hostingBundle, name: "bold")
    /// Image `book`.
    static let book = Rswift.ImageResource(bundle: R.hostingBundle, name: "book")
    /// Image `bookmark`.
    static let bookmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "bookmark")
    /// Image `box`.
    static let box = Rswift.ImageResource(bundle: R.hostingBundle, name: "box")
    /// Image `briefcase`.
    static let briefcase = Rswift.ImageResource(bundle: R.hostingBundle, name: "briefcase")
    /// Image `calendar`.
    static let calendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "calendar")
    /// Image `camera-off`.
    static let cameraOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "camera-off")
    /// Image `camera`.
    static let camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "camera")
    /// Image `cast`.
    static let cast = Rswift.ImageResource(bundle: R.hostingBundle, name: "cast")
    /// Image `check-circle`.
    static let checkCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "check-circle")
    /// Image `check-square`.
    static let checkSquare = Rswift.ImageResource(bundle: R.hostingBundle, name: "check-square")
    /// Image `check`.
    static let check = Rswift.ImageResource(bundle: R.hostingBundle, name: "check")
    /// Image `chevron-down`.
    static let chevronDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "chevron-down")
    /// Image `chevron-left`.
    static let chevronLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "chevron-left")
    /// Image `chevron-right`.
    static let chevronRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "chevron-right")
    /// Image `chevron-up`.
    static let chevronUp = Rswift.ImageResource(bundle: R.hostingBundle, name: "chevron-up")
    /// Image `chevrons-down`.
    static let chevronsDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "chevrons-down")
    /// Image `chevrons-left`.
    static let chevronsLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "chevrons-left")
    /// Image `chevrons-right`.
    static let chevronsRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "chevrons-right")
    /// Image `chevrons-up`.
    static let chevronsUp = Rswift.ImageResource(bundle: R.hostingBundle, name: "chevrons-up")
    /// Image `chrome`.
    static let chrome = Rswift.ImageResource(bundle: R.hostingBundle, name: "chrome")
    /// Image `circle`.
    static let circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "circle")
    /// Image `clipboard`.
    static let clipboard = Rswift.ImageResource(bundle: R.hostingBundle, name: "clipboard")
    /// Image `clock`.
    static let clock = Rswift.ImageResource(bundle: R.hostingBundle, name: "clock")
    /// Image `cloud-drizzle`.
    static let cloudDrizzle = Rswift.ImageResource(bundle: R.hostingBundle, name: "cloud-drizzle")
    /// Image `cloud-lightning`.
    static let cloudLightning = Rswift.ImageResource(bundle: R.hostingBundle, name: "cloud-lightning")
    /// Image `cloud-off`.
    static let cloudOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "cloud-off")
    /// Image `cloud-rain`.
    static let cloudRain = Rswift.ImageResource(bundle: R.hostingBundle, name: "cloud-rain")
    /// Image `cloud-snow`.
    static let cloudSnow = Rswift.ImageResource(bundle: R.hostingBundle, name: "cloud-snow")
    /// Image `cloud`.
    static let cloud = Rswift.ImageResource(bundle: R.hostingBundle, name: "cloud")
    /// Image `codepen`.
    static let codepen = Rswift.ImageResource(bundle: R.hostingBundle, name: "codepen")
    /// Image `command`.
    static let command = Rswift.ImageResource(bundle: R.hostingBundle, name: "command")
    /// Image `compass`.
    static let compass = Rswift.ImageResource(bundle: R.hostingBundle, name: "compass")
    /// Image `copy`.
    static let copy = Rswift.ImageResource(bundle: R.hostingBundle, name: "copy")
    /// Image `corner-down-left`.
    static let cornerDownLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "corner-down-left")
    /// Image `corner-down-right`.
    static let cornerDownRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "corner-down-right")
    /// Image `corner-left-down`.
    static let cornerLeftDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "corner-left-down")
    /// Image `corner-left-up`.
    static let cornerLeftUp = Rswift.ImageResource(bundle: R.hostingBundle, name: "corner-left-up")
    /// Image `corner-right-down`.
    static let cornerRightDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "corner-right-down")
    /// Image `corner-right-up`.
    static let cornerRightUp = Rswift.ImageResource(bundle: R.hostingBundle, name: "corner-right-up")
    /// Image `corner-up-left`.
    static let cornerUpLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "corner-up-left")
    /// Image `corner-up-right`.
    static let cornerUpRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "corner-up-right")
    /// Image `cpu`.
    static let cpu = Rswift.ImageResource(bundle: R.hostingBundle, name: "cpu")
    /// Image `credit-card`.
    static let creditCard = Rswift.ImageResource(bundle: R.hostingBundle, name: "credit-card")
    /// Image `crop`.
    static let crop = Rswift.ImageResource(bundle: R.hostingBundle, name: "crop")
    /// Image `crosshair`.
    static let crosshair = Rswift.ImageResource(bundle: R.hostingBundle, name: "crosshair")
    /// Image `delete`.
    static let delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "delete")
    /// Image `disc`.
    static let disc = Rswift.ImageResource(bundle: R.hostingBundle, name: "disc")
    /// Image `download-cloud`.
    static let downloadCloud = Rswift.ImageResource(bundle: R.hostingBundle, name: "download-cloud")
    /// Image `download`.
    static let download = Rswift.ImageResource(bundle: R.hostingBundle, name: "download")
    /// Image `droplet`.
    static let droplet = Rswift.ImageResource(bundle: R.hostingBundle, name: "droplet")
    /// Image `edit-2`.
    static let edit2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit-2")
    /// Image `edit-3`.
    static let edit3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit-3")
    /// Image `edit`.
    static let edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit")
    /// Image `external-link`.
    static let externalLink = Rswift.ImageResource(bundle: R.hostingBundle, name: "external-link")
    /// Image `eye-off`.
    static let eyeOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "eye-off")
    /// Image `eye`.
    static let eye = Rswift.ImageResource(bundle: R.hostingBundle, name: "eye")
    /// Image `facebook`.
    static let facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "facebook")
    /// Image `fast-forward`.
    static let fastForward = Rswift.ImageResource(bundle: R.hostingBundle, name: "fast-forward")
    /// Image `feather`.
    static let feather = Rswift.ImageResource(bundle: R.hostingBundle, name: "feather")
    /// Image `file-minus`.
    static let fileMinus = Rswift.ImageResource(bundle: R.hostingBundle, name: "file-minus")
    /// Image `file-plus`.
    static let filePlus = Rswift.ImageResource(bundle: R.hostingBundle, name: "file-plus")
    /// Image `file-text`.
    static let fileText = Rswift.ImageResource(bundle: R.hostingBundle, name: "file-text")
    /// Image `file`.
    static let file = Rswift.ImageResource(bundle: R.hostingBundle, name: "file")
    /// Image `film`.
    static let film = Rswift.ImageResource(bundle: R.hostingBundle, name: "film")
    /// Image `filter`.
    static let filter = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter")
    /// Image `flag`.
    static let flag = Rswift.ImageResource(bundle: R.hostingBundle, name: "flag")
    /// Image `folder`.
    static let folder = Rswift.ImageResource(bundle: R.hostingBundle, name: "folder")
    /// Image `github`.
    static let github = Rswift.ImageResource(bundle: R.hostingBundle, name: "github")
    /// Image `gitlab`.
    static let gitlab = Rswift.ImageResource(bundle: R.hostingBundle, name: "gitlab")
    /// Image `globe`.
    static let globe = Rswift.ImageResource(bundle: R.hostingBundle, name: "globe")
    /// Image `grid`.
    static let grid = Rswift.ImageResource(bundle: R.hostingBundle, name: "grid")
    /// Image `hash`.
    static let hash = Rswift.ImageResource(bundle: R.hostingBundle, name: "hash")
    /// Image `headphones`.
    static let headphones = Rswift.ImageResource(bundle: R.hostingBundle, name: "headphones")
    /// Image `heart`.
    static let heart = Rswift.ImageResource(bundle: R.hostingBundle, name: "heart")
    /// Image `help-circle`.
    static let helpCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "help-circle")
    /// Image `home`.
    static let home = Rswift.ImageResource(bundle: R.hostingBundle, name: "home")
    /// Image `image`.
    static let image = Rswift.ImageResource(bundle: R.hostingBundle, name: "image")
    /// Image `inbox`.
    static let inbox = Rswift.ImageResource(bundle: R.hostingBundle, name: "inbox")
    /// Image `info`.
    static let info = Rswift.ImageResource(bundle: R.hostingBundle, name: "info")
    /// Image `instagram`.
    static let instagram = Rswift.ImageResource(bundle: R.hostingBundle, name: "instagram")
    /// Image `italic`.
    static let italic = Rswift.ImageResource(bundle: R.hostingBundle, name: "italic")
    /// Image `layers`.
    static let layers = Rswift.ImageResource(bundle: R.hostingBundle, name: "layers")
    /// Image `layout`.
    static let layout = Rswift.ImageResource(bundle: R.hostingBundle, name: "layout")
    /// Image `life-buoy`.
    static let lifeBuoy = Rswift.ImageResource(bundle: R.hostingBundle, name: "life-buoy")
    /// Image `link-2`.
    static let link2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "link-2")
    /// Image `link`.
    static let link = Rswift.ImageResource(bundle: R.hostingBundle, name: "link")
    /// Image `list`.
    static let list = Rswift.ImageResource(bundle: R.hostingBundle, name: "list")
    /// Image `loader`.
    static let loader = Rswift.ImageResource(bundle: R.hostingBundle, name: "loader")
    /// Image `lock`.
    static let lock = Rswift.ImageResource(bundle: R.hostingBundle, name: "lock")
    /// Image `log-in`.
    static let logIn = Rswift.ImageResource(bundle: R.hostingBundle, name: "log-in")
    /// Image `log-out`.
    static let logOut = Rswift.ImageResource(bundle: R.hostingBundle, name: "log-out")
    /// Image `mail`.
    static let mail = Rswift.ImageResource(bundle: R.hostingBundle, name: "mail")
    /// Image `map-pin`.
    static let mapPin = Rswift.ImageResource(bundle: R.hostingBundle, name: "map-pin")
    /// Image `map`.
    static let map = Rswift.ImageResource(bundle: R.hostingBundle, name: "map")
    /// Image `maximize-2`.
    static let maximize2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "maximize-2")
    /// Image `maximize`.
    static let maximize = Rswift.ImageResource(bundle: R.hostingBundle, name: "maximize")
    /// Image `menu`.
    static let menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu")
    /// Image `message-circle`.
    static let messageCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "message-circle")
    /// Image `message-square`.
    static let messageSquare = Rswift.ImageResource(bundle: R.hostingBundle, name: "message-square")
    /// Image `mic-off`.
    static let micOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "mic-off")
    /// Image `mic`.
    static let mic = Rswift.ImageResource(bundle: R.hostingBundle, name: "mic")
    /// Image `minimize-2`.
    static let minimize2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "minimize-2")
    /// Image `minimize`.
    static let minimize = Rswift.ImageResource(bundle: R.hostingBundle, name: "minimize")
    /// Image `minus-circle`.
    static let minusCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "minus-circle")
    /// Image `minus-square`.
    static let minusSquare = Rswift.ImageResource(bundle: R.hostingBundle, name: "minus-square")
    /// Image `minus`.
    static let minus = Rswift.ImageResource(bundle: R.hostingBundle, name: "minus")
    /// Image `monitor`.
    static let monitor = Rswift.ImageResource(bundle: R.hostingBundle, name: "monitor")
    /// Image `moon`.
    static let moon = Rswift.ImageResource(bundle: R.hostingBundle, name: "moon")
    /// Image `more-horizontal`.
    static let moreHorizontal = Rswift.ImageResource(bundle: R.hostingBundle, name: "more-horizontal")
    /// Image `more-vertical`.
    static let moreVertical = Rswift.ImageResource(bundle: R.hostingBundle, name: "more-vertical")
    /// Image `move`.
    static let move = Rswift.ImageResource(bundle: R.hostingBundle, name: "move")
    /// Image `music`.
    static let music = Rswift.ImageResource(bundle: R.hostingBundle, name: "music")
    /// Image `navigation-2`.
    static let navigation2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "navigation-2")
    /// Image `navigation`.
    static let navigation = Rswift.ImageResource(bundle: R.hostingBundle, name: "navigation")
    /// Image `octagon`.
    static let octagon = Rswift.ImageResource(bundle: R.hostingBundle, name: "octagon")
    /// Image `package`.
    static let package = Rswift.ImageResource(bundle: R.hostingBundle, name: "package")
    /// Image `paperclip`.
    static let paperclip = Rswift.ImageResource(bundle: R.hostingBundle, name: "paperclip")
    /// Image `pause-circle`.
    static let pauseCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "pause-circle")
    /// Image `pause`.
    static let pause = Rswift.ImageResource(bundle: R.hostingBundle, name: "pause")
    /// Image `percent`.
    static let percent = Rswift.ImageResource(bundle: R.hostingBundle, name: "percent")
    /// Image `phone-call`.
    static let phoneCall = Rswift.ImageResource(bundle: R.hostingBundle, name: "phone-call")
    /// Image `phone-forwarded`.
    static let phoneForwarded = Rswift.ImageResource(bundle: R.hostingBundle, name: "phone-forwarded")
    /// Image `phone-incoming`.
    static let phoneIncoming = Rswift.ImageResource(bundle: R.hostingBundle, name: "phone-incoming")
    /// Image `phone-missed`.
    static let phoneMissed = Rswift.ImageResource(bundle: R.hostingBundle, name: "phone-missed")
    /// Image `phone-off`.
    static let phoneOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "phone-off")
    /// Image `phone-outgoing`.
    static let phoneOutgoing = Rswift.ImageResource(bundle: R.hostingBundle, name: "phone-outgoing")
    /// Image `phone`.
    static let phone = Rswift.ImageResource(bundle: R.hostingBundle, name: "phone")
    /// Image `pie-chart`.
    static let pieChart = Rswift.ImageResource(bundle: R.hostingBundle, name: "pie-chart")
    /// Image `play-circle`.
    static let playCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "play-circle")
    /// Image `play`.
    static let play = Rswift.ImageResource(bundle: R.hostingBundle, name: "play")
    /// Image `plus-circle`.
    static let plusCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus-circle")
    /// Image `plus-square`.
    static let plusSquare = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus-square")
    /// Image `plus`.
    static let plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus")
    /// Image `pocket`.
    static let pocket = Rswift.ImageResource(bundle: R.hostingBundle, name: "pocket")
    /// Image `power`.
    static let power = Rswift.ImageResource(bundle: R.hostingBundle, name: "power")
    /// Image `printer`.
    static let printer = Rswift.ImageResource(bundle: R.hostingBundle, name: "printer")
    /// Image `radio`.
    static let radio = Rswift.ImageResource(bundle: R.hostingBundle, name: "radio")
    /// Image `refresh-ccw`.
    static let refreshCcw = Rswift.ImageResource(bundle: R.hostingBundle, name: "refresh-ccw")
    /// Image `refresh-cw`.
    static let refreshCw = Rswift.ImageResource(bundle: R.hostingBundle, name: "refresh-cw")
    /// Image `repeat`.
    static let `repeat` = Rswift.ImageResource(bundle: R.hostingBundle, name: "repeat")
    /// Image `rewind`.
    static let rewind = Rswift.ImageResource(bundle: R.hostingBundle, name: "rewind")
    /// Image `rotate-ccw`.
    static let rotateCcw = Rswift.ImageResource(bundle: R.hostingBundle, name: "rotate-ccw")
    /// Image `rotate-cw`.
    static let rotateCw = Rswift.ImageResource(bundle: R.hostingBundle, name: "rotate-cw")
    /// Image `save`.
    static let save = Rswift.ImageResource(bundle: R.hostingBundle, name: "save")
    /// Image `scissors`.
    static let scissors = Rswift.ImageResource(bundle: R.hostingBundle, name: "scissors")
    /// Image `search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "search")
    /// Image `server`.
    static let server = Rswift.ImageResource(bundle: R.hostingBundle, name: "server")
    /// Image `settings`.
    static let settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings")
    /// Image `share-2`.
    static let share2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "share-2")
    /// Image `share`.
    static let share = Rswift.ImageResource(bundle: R.hostingBundle, name: "share")
    /// Image `shield`.
    static let shield = Rswift.ImageResource(bundle: R.hostingBundle, name: "shield")
    /// Image `shopping-cart`.
    static let shoppingCart = Rswift.ImageResource(bundle: R.hostingBundle, name: "shopping-cart")
    /// Image `shuffle`.
    static let shuffle = Rswift.ImageResource(bundle: R.hostingBundle, name: "shuffle")
    /// Image `sidebar`.
    static let sidebar = Rswift.ImageResource(bundle: R.hostingBundle, name: "sidebar")
    /// Image `skip-back`.
    static let skipBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "skip-back")
    /// Image `skip-forward`.
    static let skipForward = Rswift.ImageResource(bundle: R.hostingBundle, name: "skip-forward")
    /// Image `slack`.
    static let slack = Rswift.ImageResource(bundle: R.hostingBundle, name: "slack")
    /// Image `slash`.
    static let slash = Rswift.ImageResource(bundle: R.hostingBundle, name: "slash")
    /// Image `sliders`.
    static let sliders = Rswift.ImageResource(bundle: R.hostingBundle, name: "sliders")
    /// Image `smartphone`.
    static let smartphone = Rswift.ImageResource(bundle: R.hostingBundle, name: "smartphone")
    /// Image `speaker`.
    static let speaker = Rswift.ImageResource(bundle: R.hostingBundle, name: "speaker")
    /// Image `square`.
    static let square = Rswift.ImageResource(bundle: R.hostingBundle, name: "square")
    /// Image `star`.
    static let star = Rswift.ImageResource(bundle: R.hostingBundle, name: "star")
    /// Image `stop-circle`.
    static let stopCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "stop-circle")
    /// Image `sun`.
    static let sun = Rswift.ImageResource(bundle: R.hostingBundle, name: "sun")
    /// Image `sunrise`.
    static let sunrise = Rswift.ImageResource(bundle: R.hostingBundle, name: "sunrise")
    /// Image `sunset`.
    static let sunset = Rswift.ImageResource(bundle: R.hostingBundle, name: "sunset")
    /// Image `tablet`.
    static let tablet = Rswift.ImageResource(bundle: R.hostingBundle, name: "tablet")
    /// Image `tag`.
    static let tag = Rswift.ImageResource(bundle: R.hostingBundle, name: "tag")
    /// Image `target`.
    static let target = Rswift.ImageResource(bundle: R.hostingBundle, name: "target")
    /// Image `thermometer`.
    static let thermometer = Rswift.ImageResource(bundle: R.hostingBundle, name: "thermometer")
    /// Image `thumbs-down`.
    static let thumbsDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "thumbs-down")
    /// Image `thumbs-up`.
    static let thumbsUp = Rswift.ImageResource(bundle: R.hostingBundle, name: "thumbs-up")
    /// Image `toggle-left`.
    static let toggleLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "toggle-left")
    /// Image `toggle-right`.
    static let toggleRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "toggle-right")
    /// Image `trash-2`.
    static let trash2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "trash-2")
    /// Image `trash`.
    static let trash = Rswift.ImageResource(bundle: R.hostingBundle, name: "trash")
    /// Image `trending-down`.
    static let trendingDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "trending-down")
    /// Image `trending-up`.
    static let trendingUp = Rswift.ImageResource(bundle: R.hostingBundle, name: "trending-up")
    /// Image `triangle`.
    static let triangle = Rswift.ImageResource(bundle: R.hostingBundle, name: "triangle")
    /// Image `tv`.
    static let tv = Rswift.ImageResource(bundle: R.hostingBundle, name: "tv")
    /// Image `twitter`.
    static let twitter = Rswift.ImageResource(bundle: R.hostingBundle, name: "twitter")
    /// Image `type`.
    static let type = Rswift.ImageResource(bundle: R.hostingBundle, name: "type")
    /// Image `umbrella`.
    static let umbrella = Rswift.ImageResource(bundle: R.hostingBundle, name: "umbrella")
    /// Image `underline`.
    static let underline = Rswift.ImageResource(bundle: R.hostingBundle, name: "underline")
    /// Image `unlock`.
    static let unlock = Rswift.ImageResource(bundle: R.hostingBundle, name: "unlock")
    /// Image `upload-cloud`.
    static let uploadCloud = Rswift.ImageResource(bundle: R.hostingBundle, name: "upload-cloud")
    /// Image `upload`.
    static let upload = Rswift.ImageResource(bundle: R.hostingBundle, name: "upload")
    /// Image `user-check`.
    static let userCheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "user-check")
    /// Image `user-minus`.
    static let userMinus = Rswift.ImageResource(bundle: R.hostingBundle, name: "user-minus")
    /// Image `user-plus`.
    static let userPlus = Rswift.ImageResource(bundle: R.hostingBundle, name: "user-plus")
    /// Image `user-x`.
    static let userX = Rswift.ImageResource(bundle: R.hostingBundle, name: "user-x")
    /// Image `user`.
    static let user = Rswift.ImageResource(bundle: R.hostingBundle, name: "user")
    /// Image `users`.
    static let users = Rswift.ImageResource(bundle: R.hostingBundle, name: "users")
    /// Image `video-off`.
    static let videoOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "video-off")
    /// Image `video`.
    static let video = Rswift.ImageResource(bundle: R.hostingBundle, name: "video")
    /// Image `voicemail`.
    static let voicemail = Rswift.ImageResource(bundle: R.hostingBundle, name: "voicemail")
    /// Image `volume-1`.
    static let volume1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "volume-1")
    /// Image `volume-2`.
    static let volume2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "volume-2")
    /// Image `volume-x`.
    static let volumeX = Rswift.ImageResource(bundle: R.hostingBundle, name: "volume-x")
    /// Image `volume`.
    static let volume = Rswift.ImageResource(bundle: R.hostingBundle, name: "volume")
    /// Image `watch`.
    static let watch = Rswift.ImageResource(bundle: R.hostingBundle, name: "watch")
    /// Image `wifi-off`.
    static let wifiOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "wifi-off")
    /// Image `wifi`.
    static let wifi = Rswift.ImageResource(bundle: R.hostingBundle, name: "wifi")
    /// Image `wind`.
    static let wind = Rswift.ImageResource(bundle: R.hostingBundle, name: "wind")
    /// Image `x-circle`.
    static let xCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "x-circle")
    /// Image `x-square`.
    static let xSquare = Rswift.ImageResource(bundle: R.hostingBundle, name: "x-square")
    /// Image `x`.
    static let x = Rswift.ImageResource(bundle: R.hostingBundle, name: "x")
    /// Image `zap`.
    static let zap = Rswift.ImageResource(bundle: R.hostingBundle, name: "zap")
    /// Image `zoom-in`.
    static let zoomIn = Rswift.ImageResource(bundle: R.hostingBundle, name: "zoom-in")
    /// Image `zoom-out`.
    static let zoomOut = Rswift.ImageResource(bundle: R.hostingBundle, name: "zoom-out")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "activity", bundle: ..., traitCollection: ...)`
    static func activity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.activity, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "airplay", bundle: ..., traitCollection: ...)`
    static func airplay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.airplay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "alert-circle", bundle: ..., traitCollection: ...)`
    static func alertCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alertCircle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "alert-octagon", bundle: ..., traitCollection: ...)`
    static func alertOctagon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alertOctagon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "alert-triangle", bundle: ..., traitCollection: ...)`
    static func alertTriangle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alertTriangle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "align-center", bundle: ..., traitCollection: ...)`
    static func alignCenter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alignCenter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "align-justify", bundle: ..., traitCollection: ...)`
    static func alignJustify(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alignJustify, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "align-left", bundle: ..., traitCollection: ...)`
    static func alignLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alignLeft, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "align-right", bundle: ..., traitCollection: ...)`
    static func alignRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alignRight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "anchor", bundle: ..., traitCollection: ...)`
    static func anchor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.anchor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "aperture", bundle: ..., traitCollection: ...)`
    static func aperture(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aperture, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow-down", bundle: ..., traitCollection: ...)`
    static func arrowDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowDown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow-down-left", bundle: ..., traitCollection: ...)`
    static func arrowDownLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowDownLeft, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow-down-right", bundle: ..., traitCollection: ...)`
    static func arrowDownRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowDownRight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow-left", bundle: ..., traitCollection: ...)`
    static func arrowLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowLeft, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow-right", bundle: ..., traitCollection: ...)`
    static func arrowRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowRight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow-up", bundle: ..., traitCollection: ...)`
    static func arrowUp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowUp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow-up-left", bundle: ..., traitCollection: ...)`
    static func arrowUpLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowUpLeft, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow-up-right", bundle: ..., traitCollection: ...)`
    static func arrowUpRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowUpRight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "at-sign", bundle: ..., traitCollection: ...)`
    static func atSign(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.atSign, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "award", bundle: ..., traitCollection: ...)`
    static func award(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.award, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bar-chart", bundle: ..., traitCollection: ...)`
    static func barChart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.barChart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bar-chart-2", bundle: ..., traitCollection: ...)`
    static func barChart2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.barChart2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "battery", bundle: ..., traitCollection: ...)`
    static func battery(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.battery, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "battery-charging", bundle: ..., traitCollection: ...)`
    static func batteryCharging(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.batteryCharging, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bell", bundle: ..., traitCollection: ...)`
    static func bell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bell, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bell-off", bundle: ..., traitCollection: ...)`
    static func bellOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bellOff, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bluetooth", bundle: ..., traitCollection: ...)`
    static func bluetooth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bluetooth, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bold", bundle: ..., traitCollection: ...)`
    static func bold(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bold, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "book", bundle: ..., traitCollection: ...)`
    static func book(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.book, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bookmark", bundle: ..., traitCollection: ...)`
    static func bookmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bookmark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "box", bundle: ..., traitCollection: ...)`
    static func box(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.box, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "briefcase", bundle: ..., traitCollection: ...)`
    static func briefcase(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.briefcase, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "calendar", bundle: ..., traitCollection: ...)`
    static func calendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calendar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "camera", bundle: ..., traitCollection: ...)`
    static func camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.camera, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "camera-off", bundle: ..., traitCollection: ...)`
    static func cameraOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cameraOff, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cast", bundle: ..., traitCollection: ...)`
    static func cast(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cast, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check", bundle: ..., traitCollection: ...)`
    static func check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check-circle", bundle: ..., traitCollection: ...)`
    static func checkCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkCircle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check-square", bundle: ..., traitCollection: ...)`
    static func checkSquare(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkSquare, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chevron-down", bundle: ..., traitCollection: ...)`
    static func chevronDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chevronDown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chevron-left", bundle: ..., traitCollection: ...)`
    static func chevronLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chevronLeft, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chevron-right", bundle: ..., traitCollection: ...)`
    static func chevronRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chevronRight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chevron-up", bundle: ..., traitCollection: ...)`
    static func chevronUp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chevronUp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chevrons-down", bundle: ..., traitCollection: ...)`
    static func chevronsDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chevronsDown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chevrons-left", bundle: ..., traitCollection: ...)`
    static func chevronsLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chevronsLeft, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chevrons-right", bundle: ..., traitCollection: ...)`
    static func chevronsRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chevronsRight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chevrons-up", bundle: ..., traitCollection: ...)`
    static func chevronsUp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chevronsUp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chrome", bundle: ..., traitCollection: ...)`
    static func chrome(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chrome, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "circle", bundle: ..., traitCollection: ...)`
    static func circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.circle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "clipboard", bundle: ..., traitCollection: ...)`
    static func clipboard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clipboard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "clock", bundle: ..., traitCollection: ...)`
    static func clock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cloud", bundle: ..., traitCollection: ...)`
    static func cloud(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cloud, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cloud-drizzle", bundle: ..., traitCollection: ...)`
    static func cloudDrizzle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cloudDrizzle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cloud-lightning", bundle: ..., traitCollection: ...)`
    static func cloudLightning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cloudLightning, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cloud-off", bundle: ..., traitCollection: ...)`
    static func cloudOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cloudOff, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cloud-rain", bundle: ..., traitCollection: ...)`
    static func cloudRain(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cloudRain, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cloud-snow", bundle: ..., traitCollection: ...)`
    static func cloudSnow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cloudSnow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "codepen", bundle: ..., traitCollection: ...)`
    static func codepen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.codepen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "command", bundle: ..., traitCollection: ...)`
    static func command(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.command, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "compass", bundle: ..., traitCollection: ...)`
    static func compass(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.compass, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "copy", bundle: ..., traitCollection: ...)`
    static func copy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.copy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "corner-down-left", bundle: ..., traitCollection: ...)`
    static func cornerDownLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cornerDownLeft, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "corner-down-right", bundle: ..., traitCollection: ...)`
    static func cornerDownRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cornerDownRight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "corner-left-down", bundle: ..., traitCollection: ...)`
    static func cornerLeftDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cornerLeftDown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "corner-left-up", bundle: ..., traitCollection: ...)`
    static func cornerLeftUp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cornerLeftUp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "corner-right-down", bundle: ..., traitCollection: ...)`
    static func cornerRightDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cornerRightDown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "corner-right-up", bundle: ..., traitCollection: ...)`
    static func cornerRightUp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cornerRightUp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "corner-up-left", bundle: ..., traitCollection: ...)`
    static func cornerUpLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cornerUpLeft, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "corner-up-right", bundle: ..., traitCollection: ...)`
    static func cornerUpRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cornerUpRight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cpu", bundle: ..., traitCollection: ...)`
    static func cpu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cpu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "credit-card", bundle: ..., traitCollection: ...)`
    static func creditCard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.creditCard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "crop", bundle: ..., traitCollection: ...)`
    static func crop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.crop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "crosshair", bundle: ..., traitCollection: ...)`
    static func crosshair(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.crosshair, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "delete", bundle: ..., traitCollection: ...)`
    static func delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "disc", bundle: ..., traitCollection: ...)`
    static func disc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.disc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "download", bundle: ..., traitCollection: ...)`
    static func download(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.download, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "download-cloud", bundle: ..., traitCollection: ...)`
    static func downloadCloud(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.downloadCloud, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "droplet", bundle: ..., traitCollection: ...)`
    static func droplet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.droplet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit", bundle: ..., traitCollection: ...)`
    static func edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit-2", bundle: ..., traitCollection: ...)`
    static func edit2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit-3", bundle: ..., traitCollection: ...)`
    static func edit3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "external-link", bundle: ..., traitCollection: ...)`
    static func externalLink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.externalLink, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eye", bundle: ..., traitCollection: ...)`
    static func eye(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eye, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eye-off", bundle: ..., traitCollection: ...)`
    static func eyeOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eyeOff, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "facebook", bundle: ..., traitCollection: ...)`
    static func facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebook, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fast-forward", bundle: ..., traitCollection: ...)`
    static func fastForward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fastForward, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "feather", bundle: ..., traitCollection: ...)`
    static func feather(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feather, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "file", bundle: ..., traitCollection: ...)`
    static func file(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.file, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "file-minus", bundle: ..., traitCollection: ...)`
    static func fileMinus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fileMinus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "file-plus", bundle: ..., traitCollection: ...)`
    static func filePlus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filePlus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "file-text", bundle: ..., traitCollection: ...)`
    static func fileText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fileText, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "film", bundle: ..., traitCollection: ...)`
    static func film(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.film, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filter", bundle: ..., traitCollection: ...)`
    static func filter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "flag", bundle: ..., traitCollection: ...)`
    static func flag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "folder", bundle: ..., traitCollection: ...)`
    static func folder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.folder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "github", bundle: ..., traitCollection: ...)`
    static func github(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.github, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gitlab", bundle: ..., traitCollection: ...)`
    static func gitlab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gitlab, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "globe", bundle: ..., traitCollection: ...)`
    static func globe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.globe, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "grid", bundle: ..., traitCollection: ...)`
    static func grid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grid, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hash", bundle: ..., traitCollection: ...)`
    static func hash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "headphones", bundle: ..., traitCollection: ...)`
    static func headphones(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.headphones, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "heart", bundle: ..., traitCollection: ...)`
    static func heart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "help-circle", bundle: ..., traitCollection: ...)`
    static func helpCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.helpCircle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home", bundle: ..., traitCollection: ...)`
    static func home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "image", bundle: ..., traitCollection: ...)`
    static func image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "inbox", bundle: ..., traitCollection: ...)`
    static func inbox(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.inbox, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "info", bundle: ..., traitCollection: ...)`
    static func info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.info, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "instagram", bundle: ..., traitCollection: ...)`
    static func instagram(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.instagram, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "italic", bundle: ..., traitCollection: ...)`
    static func italic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.italic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "layers", bundle: ..., traitCollection: ...)`
    static func layers(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.layers, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "layout", bundle: ..., traitCollection: ...)`
    static func layout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.layout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "life-buoy", bundle: ..., traitCollection: ...)`
    static func lifeBuoy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lifeBuoy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "link", bundle: ..., traitCollection: ...)`
    static func link(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.link, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "link-2", bundle: ..., traitCollection: ...)`
    static func link2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.link2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "list", bundle: ..., traitCollection: ...)`
    static func list(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.list, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "loader", bundle: ..., traitCollection: ...)`
    static func loader(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loader, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lock", bundle: ..., traitCollection: ...)`
    static func lock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "log-in", bundle: ..., traitCollection: ...)`
    static func logIn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logIn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "log-out", bundle: ..., traitCollection: ...)`
    static func logOut(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logOut, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mail", bundle: ..., traitCollection: ...)`
    static func mail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "map", bundle: ..., traitCollection: ...)`
    static func map(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.map, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "map-pin", bundle: ..., traitCollection: ...)`
    static func mapPin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapPin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "maximize", bundle: ..., traitCollection: ...)`
    static func maximize(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.maximize, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "maximize-2", bundle: ..., traitCollection: ...)`
    static func maximize2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.maximize2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu", bundle: ..., traitCollection: ...)`
    static func menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message-circle", bundle: ..., traitCollection: ...)`
    static func messageCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messageCircle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message-square", bundle: ..., traitCollection: ...)`
    static func messageSquare(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messageSquare, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mic", bundle: ..., traitCollection: ...)`
    static func mic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mic-off", bundle: ..., traitCollection: ...)`
    static func micOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.micOff, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "minimize", bundle: ..., traitCollection: ...)`
    static func minimize(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.minimize, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "minimize-2", bundle: ..., traitCollection: ...)`
    static func minimize2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.minimize2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "minus", bundle: ..., traitCollection: ...)`
    static func minus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.minus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "minus-circle", bundle: ..., traitCollection: ...)`
    static func minusCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.minusCircle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "minus-square", bundle: ..., traitCollection: ...)`
    static func minusSquare(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.minusSquare, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "monitor", bundle: ..., traitCollection: ...)`
    static func monitor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.monitor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "moon", bundle: ..., traitCollection: ...)`
    static func moon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "more-horizontal", bundle: ..., traitCollection: ...)`
    static func moreHorizontal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moreHorizontal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "more-vertical", bundle: ..., traitCollection: ...)`
    static func moreVertical(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moreVertical, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "move", bundle: ..., traitCollection: ...)`
    static func move(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.move, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "music", bundle: ..., traitCollection: ...)`
    static func music(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.music, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navigation", bundle: ..., traitCollection: ...)`
    static func navigation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navigation-2", bundle: ..., traitCollection: ...)`
    static func navigation2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigation2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "octagon", bundle: ..., traitCollection: ...)`
    static func octagon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.octagon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "package", bundle: ..., traitCollection: ...)`
    static func package(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.package, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "paperclip", bundle: ..., traitCollection: ...)`
    static func paperclip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paperclip, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pause", bundle: ..., traitCollection: ...)`
    static func pause(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pause, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pause-circle", bundle: ..., traitCollection: ...)`
    static func pauseCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pauseCircle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "percent", bundle: ..., traitCollection: ...)`
    static func percent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.percent, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "phone", bundle: ..., traitCollection: ...)`
    static func phone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.phone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "phone-call", bundle: ..., traitCollection: ...)`
    static func phoneCall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.phoneCall, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "phone-forwarded", bundle: ..., traitCollection: ...)`
    static func phoneForwarded(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.phoneForwarded, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "phone-incoming", bundle: ..., traitCollection: ...)`
    static func phoneIncoming(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.phoneIncoming, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "phone-missed", bundle: ..., traitCollection: ...)`
    static func phoneMissed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.phoneMissed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "phone-off", bundle: ..., traitCollection: ...)`
    static func phoneOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.phoneOff, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "phone-outgoing", bundle: ..., traitCollection: ...)`
    static func phoneOutgoing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.phoneOutgoing, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pie-chart", bundle: ..., traitCollection: ...)`
    static func pieChart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pieChart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "play", bundle: ..., traitCollection: ...)`
    static func play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.play, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "play-circle", bundle: ..., traitCollection: ...)`
    static func playCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.playCircle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus", bundle: ..., traitCollection: ...)`
    static func plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus-circle", bundle: ..., traitCollection: ...)`
    static func plusCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plusCircle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus-square", bundle: ..., traitCollection: ...)`
    static func plusSquare(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plusSquare, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pocket", bundle: ..., traitCollection: ...)`
    static func pocket(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pocket, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "power", bundle: ..., traitCollection: ...)`
    static func power(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.power, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "printer", bundle: ..., traitCollection: ...)`
    static func printer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.printer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "radio", bundle: ..., traitCollection: ...)`
    static func radio(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.radio, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "refresh-ccw", bundle: ..., traitCollection: ...)`
    static func refreshCcw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.refreshCcw, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "refresh-cw", bundle: ..., traitCollection: ...)`
    static func refreshCw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.refreshCw, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "repeat", bundle: ..., traitCollection: ...)`
    static func `repeat`(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.`repeat`, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rewind", bundle: ..., traitCollection: ...)`
    static func rewind(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rewind, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rotate-ccw", bundle: ..., traitCollection: ...)`
    static func rotateCcw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rotateCcw, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rotate-cw", bundle: ..., traitCollection: ...)`
    static func rotateCw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rotateCw, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "save", bundle: ..., traitCollection: ...)`
    static func save(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.save, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "scissors", bundle: ..., traitCollection: ...)`
    static func scissors(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scissors, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "server", bundle: ..., traitCollection: ...)`
    static func server(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.server, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings", bundle: ..., traitCollection: ...)`
    static func settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "share", bundle: ..., traitCollection: ...)`
    static func share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "share-2", bundle: ..., traitCollection: ...)`
    static func share2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shield", bundle: ..., traitCollection: ...)`
    static func shield(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shield, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shopping-cart", bundle: ..., traitCollection: ...)`
    static func shoppingCart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shoppingCart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shuffle", bundle: ..., traitCollection: ...)`
    static func shuffle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shuffle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sidebar", bundle: ..., traitCollection: ...)`
    static func sidebar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sidebar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "skip-back", bundle: ..., traitCollection: ...)`
    static func skipBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.skipBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "skip-forward", bundle: ..., traitCollection: ...)`
    static func skipForward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.skipForward, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slack", bundle: ..., traitCollection: ...)`
    static func slack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slash", bundle: ..., traitCollection: ...)`
    static func slash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sliders", bundle: ..., traitCollection: ...)`
    static func sliders(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sliders, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "smartphone", bundle: ..., traitCollection: ...)`
    static func smartphone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smartphone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "speaker", bundle: ..., traitCollection: ...)`
    static func speaker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.speaker, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "square", bundle: ..., traitCollection: ...)`
    static func square(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.square, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "star", bundle: ..., traitCollection: ...)`
    static func star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "stop-circle", bundle: ..., traitCollection: ...)`
    static func stopCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stopCircle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sun", bundle: ..., traitCollection: ...)`
    static func sun(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sun, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sunrise", bundle: ..., traitCollection: ...)`
    static func sunrise(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sunrise, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sunset", bundle: ..., traitCollection: ...)`
    static func sunset(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sunset, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tablet", bundle: ..., traitCollection: ...)`
    static func tablet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tablet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tag", bundle: ..., traitCollection: ...)`
    static func tag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "target", bundle: ..., traitCollection: ...)`
    static func target(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.target, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "thermometer", bundle: ..., traitCollection: ...)`
    static func thermometer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thermometer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "thumbs-down", bundle: ..., traitCollection: ...)`
    static func thumbsDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thumbsDown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "thumbs-up", bundle: ..., traitCollection: ...)`
    static func thumbsUp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thumbsUp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "toggle-left", bundle: ..., traitCollection: ...)`
    static func toggleLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toggleLeft, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "toggle-right", bundle: ..., traitCollection: ...)`
    static func toggleRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toggleRight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "trash", bundle: ..., traitCollection: ...)`
    static func trash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.trash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "trash-2", bundle: ..., traitCollection: ...)`
    static func trash2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.trash2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "trending-down", bundle: ..., traitCollection: ...)`
    static func trendingDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.trendingDown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "trending-up", bundle: ..., traitCollection: ...)`
    static func trendingUp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.trendingUp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "triangle", bundle: ..., traitCollection: ...)`
    static func triangle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.triangle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tv", bundle: ..., traitCollection: ...)`
    static func tv(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tv, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "twitter", bundle: ..., traitCollection: ...)`
    static func twitter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.twitter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "type", bundle: ..., traitCollection: ...)`
    static func type(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.type, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "umbrella", bundle: ..., traitCollection: ...)`
    static func umbrella(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.umbrella, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "underline", bundle: ..., traitCollection: ...)`
    static func underline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.underline, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unlock", bundle: ..., traitCollection: ...)`
    static func unlock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unlock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "upload", bundle: ..., traitCollection: ...)`
    static func upload(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.upload, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "upload-cloud", bundle: ..., traitCollection: ...)`
    static func uploadCloud(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uploadCloud, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user", bundle: ..., traitCollection: ...)`
    static func user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user-check", bundle: ..., traitCollection: ...)`
    static func userCheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userCheck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user-minus", bundle: ..., traitCollection: ...)`
    static func userMinus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userMinus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user-plus", bundle: ..., traitCollection: ...)`
    static func userPlus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userPlus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user-x", bundle: ..., traitCollection: ...)`
    static func userX(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userX, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "users", bundle: ..., traitCollection: ...)`
    static func users(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.users, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video", bundle: ..., traitCollection: ...)`
    static func video(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "video-off", bundle: ..., traitCollection: ...)`
    static func videoOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.videoOff, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voicemail", bundle: ..., traitCollection: ...)`
    static func voicemail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voicemail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "volume", bundle: ..., traitCollection: ...)`
    static func volume(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.volume, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "volume-1", bundle: ..., traitCollection: ...)`
    static func volume1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.volume1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "volume-2", bundle: ..., traitCollection: ...)`
    static func volume2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.volume2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "volume-x", bundle: ..., traitCollection: ...)`
    static func volumeX(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.volumeX, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "watch", bundle: ..., traitCollection: ...)`
    static func watch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.watch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wifi", bundle: ..., traitCollection: ...)`
    static func wifi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wifi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wifi-off", bundle: ..., traitCollection: ...)`
    static func wifiOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wifiOff, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wind", bundle: ..., traitCollection: ...)`
    static func wind(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wind, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "x", bundle: ..., traitCollection: ...)`
    static func x(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.x, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "x-circle", bundle: ..., traitCollection: ...)`
    static func xCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xCircle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "x-square", bundle: ..., traitCollection: ...)`
    static func xSquare(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xSquare, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "zap", bundle: ..., traitCollection: ...)`
    static func zap(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zap, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "zoom-in", bundle: ..., traitCollection: ...)`
    static func zoomIn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zoomIn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "zoom-out", bundle: ..., traitCollection: ...)`
    static func zoomOut(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zoomOut, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `ResultBarView`.
    static let resultBarView = _R.nib._ResultBarView()
    /// Nib `ResultTableViewCell`.
    static let resultTableViewCell = _R.nib._ResultTableViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ResultBarView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.resultBarView) instead")
    static func resultBarView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.resultBarView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ResultTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.resultTableViewCell) instead")
    static func resultTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.resultTableViewCell)
    }
    #endif

    static func resultBarView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.resultBarView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func resultTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ResultTableViewCell? {
      return R.nib.resultTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ResultTableViewCell
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib {
    struct _ResultBarView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ResultBarView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ResultTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ResultTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ResultTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ResultTableViewCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ViewController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
